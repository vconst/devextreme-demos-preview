/// <reference types="node" />
/// <reference types="testcafe" />
import * as LooksSame from 'looks-same';
interface ComparerOptions {
    path: string;
    highlightColor: {
        r: number;
        g: number;
        b: number;
    };
    maskRadius?: number;
    attempts: number;
    attemptTimeout: number;
    looksSameComparisonOptions: Parameters<typeof LooksSame.createDiff>[0];
}
export declare function looksSame({ etalonFileName, screenshotBuffer, comparisonOptions }: {
    etalonFileName: string;
    screenshotBuffer: Buffer;
    comparisonOptions: ComparerOptions['looksSameComparisonOptions'];
}): Promise<boolean>;
declare type SelectorType = Selector | string | null;
export declare function compareScreenshot(t: TestController, screenshotName: string, element?: SelectorType, comparisonOptions?: Partial<ComparerOptions>): Promise<boolean>;
export interface ScreenshotsComparer {
    takeScreenshot: (screenshotName: string, element?: SelectorType, comparisonOptions?: Partial<ComparerOptions> | undefined) => Promise<boolean>;
    compareResults: {
        isValid: () => boolean;
        errorMessages: () => string;
    };
}
export declare function createScreenshotsComparer(t: TestController): ScreenshotsComparer;
export {};
