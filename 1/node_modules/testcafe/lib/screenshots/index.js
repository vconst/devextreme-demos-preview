"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const moment_1 = __importDefault(require("moment"));
const capturer_1 = __importDefault(require("./capturer"));
const path_pattern_1 = __importDefault(require("../utils/path-pattern"));
const get_common_path_1 = __importDefault(require("../utils/get-common-path"));
const default_extension_1 = __importDefault(require("./default-extension"));
class Screenshots {
    constructor({ enabled, path, pathPattern, fullPage }) {
        this.enabled = enabled;
        this.screenshotsPath = path;
        this.screenshotsPattern = pathPattern;
        this.fullPage = fullPage;
        this.testEntries = [];
        this.now = moment_1.default();
    }
    _addTestEntry(test) {
        const testEntry = {
            test: test,
            testRuns: {},
            screenshots: [],
        };
        this.testEntries.push(testEntry);
        return testEntry;
    }
    _getTestEntry(test) {
        return lodash_1.find(this.testEntries, entry => entry.test === test);
    }
    _ensureTestEntry(test) {
        let testEntry = this._getTestEntry(test);
        if (!testEntry)
            testEntry = this._addTestEntry(test);
        return testEntry;
    }
    getScreenshotsInfo(test) {
        return this._getTestEntry(test).screenshots;
    }
    hasCapturedFor(test) {
        return this.getScreenshotsInfo(test).length > 0;
    }
    getPathFor(test) {
        const testEntry = this._getTestEntry(test);
        const screenshotPaths = testEntry.screenshots.map(screenshot => screenshot.screenshotPath);
        return get_common_path_1.default(screenshotPaths);
    }
    createCapturerFor(test, testIndex, quarantine, connection, warningLog) {
        const testEntry = this._ensureTestEntry(test);
        const pathPattern = new path_pattern_1.default(this.screenshotsPattern, default_extension_1.default, {
            testIndex,
            quarantineAttempt: quarantine ? quarantine.getNextAttemptNumber() : null,
            now: this.now,
            fixture: test.fixture.name,
            test: test.name,
            parsedUserAgent: connection.browserInfo.parsedUserAgent,
        });
        return new capturer_1.default(this.screenshotsPath, testEntry, connection, pathPattern, this.fullPage, warningLog);
    }
    addTestRun(test, testRun) {
        const testEntry = this._getTestEntry(test);
        testEntry.testRuns[testRun.browserConnection.id] = testRun;
    }
}
exports.default = Screenshots;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyZWVuc2hvdHMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtQ0FBOEI7QUFDOUIsb0RBQTRCO0FBQzVCLDBEQUFrQztBQUNsQyx5RUFBZ0Q7QUFDaEQsK0VBQXFEO0FBQ3JELDRFQUErRDtBQUUvRCxNQUFxQixXQUFXO0lBQzVCLFlBQWEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUU7UUFDakQsSUFBSSxDQUFDLE9BQU8sR0FBYyxPQUFPLENBQUM7UUFDbEMsSUFBSSxDQUFDLGVBQWUsR0FBTSxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLFdBQVcsQ0FBQztRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFhLFFBQVEsQ0FBQztRQUNuQyxJQUFJLENBQUMsV0FBVyxHQUFVLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsR0FBRyxHQUFrQixnQkFBTSxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVELGFBQWEsQ0FBRSxJQUFJO1FBQ2YsTUFBTSxTQUFTLEdBQUc7WUFDZCxJQUFJLEVBQVMsSUFBSTtZQUNqQixRQUFRLEVBQUssRUFBRTtZQUNmLFdBQVcsRUFBRSxFQUFFO1NBQ2xCLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVqQyxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBRUQsYUFBYSxDQUFFLElBQUk7UUFDZixPQUFPLGFBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsZ0JBQWdCLENBQUUsSUFBSTtRQUNsQixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXpDLElBQUksQ0FBQyxTQUFTO1lBQ1YsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFekMsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUVELGtCQUFrQixDQUFFLElBQUk7UUFDcEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUNoRCxDQUFDO0lBRUQsY0FBYyxDQUFFLElBQUk7UUFDaEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsVUFBVSxDQUFFLElBQUk7UUFDWixNQUFNLFNBQVMsR0FBUyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pELE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTNGLE9BQU8seUJBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsaUJBQWlCLENBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVU7UUFDbEUsTUFBTSxTQUFTLEdBQUssSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hELE1BQU0sV0FBVyxHQUFHLElBQUksc0JBQVcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsMkJBQTRCLEVBQUU7WUFDdkYsU0FBUztZQUNULGlCQUFpQixFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDeEUsR0FBRyxFQUFnQixJQUFJLENBQUMsR0FBRztZQUMzQixPQUFPLEVBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJO1lBQ3BDLElBQUksRUFBZSxJQUFJLENBQUMsSUFBSTtZQUM1QixlQUFlLEVBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxlQUFlO1NBQzVELENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxrQkFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUM3RyxDQUFDO0lBRUQsVUFBVSxDQUFFLElBQUksRUFBRSxPQUFPO1FBQ3JCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFM0MsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDO0lBQy9ELENBQUM7Q0FDSjtBQXJFRCw4QkFxRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmaW5kIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBDYXB0dXJlciBmcm9tICcuL2NhcHR1cmVyJztcbmltcG9ydCBQYXRoUGF0dGVybiBmcm9tICcuLi91dGlscy9wYXRoLXBhdHRlcm4nO1xuaW1wb3J0IGdldENvbW1vblBhdGggZnJvbSAnLi4vdXRpbHMvZ2V0LWNvbW1vbi1wYXRoJztcbmltcG9ydCBERUZBVUxUX1NDUkVFTlNIT1RfRVhURU5TSU9OIGZyb20gJy4vZGVmYXVsdC1leHRlbnNpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JlZW5zaG90cyB7XG4gICAgY29uc3RydWN0b3IgKHsgZW5hYmxlZCwgcGF0aCwgcGF0aFBhdHRlcm4sIGZ1bGxQYWdlIH0pIHtcbiAgICAgICAgdGhpcy5lbmFibGVkICAgICAgICAgICAgPSBlbmFibGVkO1xuICAgICAgICB0aGlzLnNjcmVlbnNob3RzUGF0aCAgICA9IHBhdGg7XG4gICAgICAgIHRoaXMuc2NyZWVuc2hvdHNQYXR0ZXJuID0gcGF0aFBhdHRlcm47XG4gICAgICAgIHRoaXMuZnVsbFBhZ2UgICAgICAgICAgID0gZnVsbFBhZ2U7XG4gICAgICAgIHRoaXMudGVzdEVudHJpZXMgICAgICAgID0gW107XG4gICAgICAgIHRoaXMubm93ICAgICAgICAgICAgICAgID0gbW9tZW50KCk7XG4gICAgfVxuXG4gICAgX2FkZFRlc3RFbnRyeSAodGVzdCkge1xuICAgICAgICBjb25zdCB0ZXN0RW50cnkgPSB7XG4gICAgICAgICAgICB0ZXN0OiAgICAgICAgdGVzdCxcbiAgICAgICAgICAgIHRlc3RSdW5zOiAgICB7fSxcbiAgICAgICAgICAgIHNjcmVlbnNob3RzOiBbXSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRlc3RFbnRyaWVzLnB1c2godGVzdEVudHJ5KTtcblxuICAgICAgICByZXR1cm4gdGVzdEVudHJ5O1xuICAgIH1cblxuICAgIF9nZXRUZXN0RW50cnkgKHRlc3QpIHtcbiAgICAgICAgcmV0dXJuIGZpbmQodGhpcy50ZXN0RW50cmllcywgZW50cnkgPT4gZW50cnkudGVzdCA9PT0gdGVzdCk7XG4gICAgfVxuXG4gICAgX2Vuc3VyZVRlc3RFbnRyeSAodGVzdCkge1xuICAgICAgICBsZXQgdGVzdEVudHJ5ID0gdGhpcy5fZ2V0VGVzdEVudHJ5KHRlc3QpO1xuXG4gICAgICAgIGlmICghdGVzdEVudHJ5KVxuICAgICAgICAgICAgdGVzdEVudHJ5ID0gdGhpcy5fYWRkVGVzdEVudHJ5KHRlc3QpO1xuXG4gICAgICAgIHJldHVybiB0ZXN0RW50cnk7XG4gICAgfVxuXG4gICAgZ2V0U2NyZWVuc2hvdHNJbmZvICh0ZXN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRUZXN0RW50cnkodGVzdCkuc2NyZWVuc2hvdHM7XG4gICAgfVxuXG4gICAgaGFzQ2FwdHVyZWRGb3IgKHRlc3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2NyZWVuc2hvdHNJbmZvKHRlc3QpLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgZ2V0UGF0aEZvciAodGVzdCkge1xuICAgICAgICBjb25zdCB0ZXN0RW50cnkgICAgICAgPSB0aGlzLl9nZXRUZXN0RW50cnkodGVzdCk7XG4gICAgICAgIGNvbnN0IHNjcmVlbnNob3RQYXRocyA9IHRlc3RFbnRyeS5zY3JlZW5zaG90cy5tYXAoc2NyZWVuc2hvdCA9PiBzY3JlZW5zaG90LnNjcmVlbnNob3RQYXRoKTtcblxuICAgICAgICByZXR1cm4gZ2V0Q29tbW9uUGF0aChzY3JlZW5zaG90UGF0aHMpO1xuICAgIH1cblxuICAgIGNyZWF0ZUNhcHR1cmVyRm9yICh0ZXN0LCB0ZXN0SW5kZXgsIHF1YXJhbnRpbmUsIGNvbm5lY3Rpb24sIHdhcm5pbmdMb2cpIHtcbiAgICAgICAgY29uc3QgdGVzdEVudHJ5ICAgPSB0aGlzLl9lbnN1cmVUZXN0RW50cnkodGVzdCk7XG4gICAgICAgIGNvbnN0IHBhdGhQYXR0ZXJuID0gbmV3IFBhdGhQYXR0ZXJuKHRoaXMuc2NyZWVuc2hvdHNQYXR0ZXJuLCBERUZBVUxUX1NDUkVFTlNIT1RfRVhURU5TSU9OLCB7XG4gICAgICAgICAgICB0ZXN0SW5kZXgsXG4gICAgICAgICAgICBxdWFyYW50aW5lQXR0ZW1wdDogcXVhcmFudGluZSA/IHF1YXJhbnRpbmUuZ2V0TmV4dEF0dGVtcHROdW1iZXIoKSA6IG51bGwsXG4gICAgICAgICAgICBub3c6ICAgICAgICAgICAgICAgdGhpcy5ub3csXG4gICAgICAgICAgICBmaXh0dXJlOiAgICAgICAgICAgdGVzdC5maXh0dXJlLm5hbWUsXG4gICAgICAgICAgICB0ZXN0OiAgICAgICAgICAgICAgdGVzdC5uYW1lLFxuICAgICAgICAgICAgcGFyc2VkVXNlckFnZW50OiAgIGNvbm5lY3Rpb24uYnJvd3NlckluZm8ucGFyc2VkVXNlckFnZW50LFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbmV3IENhcHR1cmVyKHRoaXMuc2NyZWVuc2hvdHNQYXRoLCB0ZXN0RW50cnksIGNvbm5lY3Rpb24sIHBhdGhQYXR0ZXJuLCB0aGlzLmZ1bGxQYWdlLCB3YXJuaW5nTG9nKTtcbiAgICB9XG5cbiAgICBhZGRUZXN0UnVuICh0ZXN0LCB0ZXN0UnVuKSB7XG4gICAgICAgIGNvbnN0IHRlc3RFbnRyeSA9IHRoaXMuX2dldFRlc3RFbnRyeSh0ZXN0KTtcblxuICAgICAgICB0ZXN0RW50cnkudGVzdFJ1bnNbdGVzdFJ1bi5icm93c2VyQ29ubmVjdGlvbi5pZF0gPSB0ZXN0UnVuO1xuICAgIH1cbn1cbiJdfQ==