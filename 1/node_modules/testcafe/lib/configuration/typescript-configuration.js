"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_base_1 = __importDefault(require("./configuration-base"));
const default_values_1 = require("./default-values");
const lodash_1 = require("lodash");
const warning_message_1 = __importDefault(require("../notifications/warning-message"));
const render_template_1 = __importDefault(require("../utils/render-template"));
const runtime_1 = require("../errors/runtime");
const types_1 = require("../errors/types");
const option_source_1 = __importDefault(require("./option-source"));
const lazyRequire = require('import-lazy')(require);
const typescript = lazyRequire('typescript');
class TypescriptConfiguration extends configuration_base_1.default {
    constructor(tsConfigPath) {
        super(tsConfigPath);
        this.basePath = process.cwd();
        this._ensureDefaultOptions();
    }
    _ensureDefaultOptions() {
        for (const option in default_values_1.DEFAULT_TYPESCRIPT_COMPILER_OPTIONS)
            this._ensureOptionWithValue(option, default_values_1.DEFAULT_TYPESCRIPT_COMPILER_OPTIONS[option], option_source_1.default.Configuration);
    }
    async init(customCompilerOptions) {
        const opts = await this._load();
        if (opts && opts.compilerOptions) {
            const parsedOpts = this._parseOptions(opts);
            this.mergeOptions(parsedOpts);
        }
        if (customCompilerOptions)
            this.mergeOptions(customCompilerOptions);
        this._notifyThatOptionsCannotBeOverridden();
    }
    async _isConfigurationFileExists() {
        const fileExists = await super._isConfigurationFileExists();
        if (!fileExists)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.cannotFindTypescriptConfigurationFile, this.filePath);
        return true;
    }
    _parseOptions(opts) {
        const parsed = typescript.parseJsonConfigFileContent(opts, typescript.sys, this.basePath, void 0, this._filePath);
        return lodash_1.omit(parsed.options, default_values_1.TYPESCRIPT_BLACKLISTED_OPTIONS);
    }
    _notifyThatOptionsCannotBeOverridden() {
        const warnedOptions = lodash_1.intersection(this._overriddenOptions, default_values_1.TYPESCRIPT_COMPILER_NON_OVERRIDABLE_OPTIONS);
        if (!warnedOptions.length)
            return;
        const warningMessage = warnedOptions
            .map(option => render_template_1.default(warning_message_1.default.cannotOverrideTypeScriptConfigOptions, option))
            .join('\n');
        configuration_base_1.default._showConsoleWarning(warningMessage);
    }
    _setOptionValue(option, value) {
        if (!default_values_1.TYPESCRIPT_COMPILER_NON_OVERRIDABLE_OPTIONS.includes(option.name))
            super._setOptionValue(option, value);
        else
            this._addOverriddenOptionIfNecessary(option.value, value, option.source, option.name);
    }
}
exports.default = TypescriptConfiguration;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXNjcmlwdC1jb25maWd1cmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZ3VyYXRpb24vdHlwZXNjcmlwdC1jb25maWd1cmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOEVBQWlEO0FBQ2pELHFEQUkwQjtBQUUxQixtQ0FBNEM7QUFDNUMsdUZBQWdFO0FBQ2hFLCtFQUFzRDtBQUN0RCwrQ0FBaUQ7QUFDakQsMkNBQWlEO0FBRWpELG9FQUEyQztBQUUzQyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEQsTUFBTSxVQUFVLEdBQUksV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBTTlDLE1BQXFCLHVCQUF3QixTQUFRLDRCQUFhO0lBRzlELFlBQW9CLFlBQTJCO1FBQzNDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVwQixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUU5QixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRU8scUJBQXFCO1FBQ3pCLEtBQUssTUFBTSxNQUFNLElBQUksb0RBQW1DO1lBQ3BELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsb0RBQW1DLENBQUMsTUFBTSxDQUFDLEVBQUUsdUJBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNySCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBRSxxQkFBOEI7UUFDN0MsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFvQyxDQUFDO1FBRWxFLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDOUIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUU1QyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2pDO1FBRUQsSUFBSSxxQkFBcUI7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFUyxLQUFLLENBQUMsMEJBQTBCO1FBQ3RDLE1BQU0sVUFBVSxHQUFHLE1BQU0sS0FBSyxDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFFNUQsSUFBSSxDQUFDLFVBQVU7WUFDWCxNQUFNLElBQUksc0JBQVksQ0FBQyxzQkFBYyxDQUFDLHFDQUFxQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVoRyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sYUFBYSxDQUFFLElBQVk7UUFDOUIsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLDBCQUEwQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWxILE9BQU8sYUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsK0NBQThCLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRU8sb0NBQW9DO1FBQ3hDLE1BQU0sYUFBYSxHQUFHLHFCQUFZLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLDREQUEyQyxDQUFDLENBQUM7UUFFekcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNO1lBQ3JCLE9BQU87UUFFWCxNQUFNLGNBQWMsR0FBRyxhQUFhO2FBQy9CLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLHlCQUFjLENBQUMseUJBQWdCLENBQUMscUNBQXFDLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDN0YsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhCLDRCQUFhLENBQUMsbUJBQW1CLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVTLGVBQWUsQ0FBRSxNQUFjLEVBQUUsS0FBa0I7UUFDekQsSUFBSSxDQUFDLDREQUEyQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2xFLEtBQUssQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDOztZQUVyQyxJQUFJLENBQUMsK0JBQStCLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUYsQ0FBQztDQUNKO0FBakVELDBDQWlFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25maWd1cmF0aW9uIGZyb20gJy4vY29uZmlndXJhdGlvbi1iYXNlJztcbmltcG9ydCB7XG4gICAgREVGQVVMVF9UWVBFU0NSSVBUX0NPTVBJTEVSX09QVElPTlMsXG4gICAgVFlQRVNDUklQVF9DT01QSUxFUl9OT05fT1ZFUlJJREFCTEVfT1BUSU9OUyxcbiAgICBUWVBFU0NSSVBUX0JMQUNLTElTVEVEX09QVElPTlMsXG59IGZyb20gJy4vZGVmYXVsdC12YWx1ZXMnO1xuXG5pbXBvcnQgeyBpbnRlcnNlY3Rpb24sIG9taXQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFdBUk5JTkdfTUVTU0FHRVMgZnJvbSAnLi4vbm90aWZpY2F0aW9ucy93YXJuaW5nLW1lc3NhZ2UnO1xuaW1wb3J0IHJlbmRlclRlbXBsYXRlIGZyb20gJy4uL3V0aWxzL3JlbmRlci10ZW1wbGF0ZSc7XG5pbXBvcnQgeyBHZW5lcmFsRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvcnVudGltZSc7XG5pbXBvcnQgeyBSVU5USU1FX0VSUk9SUyB9IGZyb20gJy4uL2Vycm9ycy90eXBlcyc7XG5pbXBvcnQgT3B0aW9uIGZyb20gJy4vb3B0aW9uJztcbmltcG9ydCBPcHRpb25Tb3VyY2UgZnJvbSAnLi9vcHRpb24tc291cmNlJztcblxuY29uc3QgbGF6eVJlcXVpcmUgPSByZXF1aXJlKCdpbXBvcnQtbGF6eScpKHJlcXVpcmUpO1xuY29uc3QgdHlwZXNjcmlwdCAgPSBsYXp5UmVxdWlyZSgndHlwZXNjcmlwdCcpO1xuXG5pbnRlcmZhY2UgVHlwZXNjcmlwdENvbmZpZ3VyYXRpb25PcHRpb25zIHtcbiAgICBjb21waWxlck9wdGlvbnM/OiBvYmplY3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR5cGVzY3JpcHRDb25maWd1cmF0aW9uIGV4dGVuZHMgQ29uZmlndXJhdGlvbiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBiYXNlUGF0aDogc3RyaW5nO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yICh0c0NvbmZpZ1BhdGg6IHN0cmluZyB8IG51bGwpIHtcbiAgICAgICAgc3VwZXIodHNDb25maWdQYXRoKTtcblxuICAgICAgICB0aGlzLmJhc2VQYXRoID0gcHJvY2Vzcy5jd2QoKTtcblxuICAgICAgICB0aGlzLl9lbnN1cmVEZWZhdWx0T3B0aW9ucygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2Vuc3VyZURlZmF1bHRPcHRpb25zICgpOiB2b2lkIHtcbiAgICAgICAgZm9yIChjb25zdCBvcHRpb24gaW4gREVGQVVMVF9UWVBFU0NSSVBUX0NPTVBJTEVSX09QVElPTlMpXG4gICAgICAgICAgICB0aGlzLl9lbnN1cmVPcHRpb25XaXRoVmFsdWUob3B0aW9uLCBERUZBVUxUX1RZUEVTQ1JJUFRfQ09NUElMRVJfT1BUSU9OU1tvcHRpb25dLCBPcHRpb25Tb3VyY2UuQ29uZmlndXJhdGlvbik7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGluaXQgKGN1c3RvbUNvbXBpbGVyT3B0aW9ucz86IG9iamVjdCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBvcHRzID0gYXdhaXQgdGhpcy5fbG9hZCgpIGFzIFR5cGVzY3JpcHRDb25maWd1cmF0aW9uT3B0aW9ucztcblxuICAgICAgICBpZiAob3B0cyAmJiBvcHRzLmNvbXBpbGVyT3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkT3B0cyA9IHRoaXMuX3BhcnNlT3B0aW9ucyhvcHRzKTtcblxuICAgICAgICAgICAgdGhpcy5tZXJnZU9wdGlvbnMocGFyc2VkT3B0cyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VzdG9tQ29tcGlsZXJPcHRpb25zKVxuICAgICAgICAgICAgdGhpcy5tZXJnZU9wdGlvbnMoY3VzdG9tQ29tcGlsZXJPcHRpb25zKTtcblxuICAgICAgICB0aGlzLl9ub3RpZnlUaGF0T3B0aW9uc0Nhbm5vdEJlT3ZlcnJpZGRlbigpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhc3luYyBfaXNDb25maWd1cmF0aW9uRmlsZUV4aXN0cyAoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IGZpbGVFeGlzdHMgPSBhd2FpdCBzdXBlci5faXNDb25maWd1cmF0aW9uRmlsZUV4aXN0cygpO1xuXG4gICAgICAgIGlmICghZmlsZUV4aXN0cylcbiAgICAgICAgICAgIHRocm93IG5ldyBHZW5lcmFsRXJyb3IoUlVOVElNRV9FUlJPUlMuY2Fubm90RmluZFR5cGVzY3JpcHRDb25maWd1cmF0aW9uRmlsZSwgdGhpcy5maWxlUGF0aCk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcHVibGljIF9wYXJzZU9wdGlvbnMgKG9wdHM6IG9iamVjdCk6IG9iamVjdCB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHR5cGVzY3JpcHQucGFyc2VKc29uQ29uZmlnRmlsZUNvbnRlbnQob3B0cywgdHlwZXNjcmlwdC5zeXMsIHRoaXMuYmFzZVBhdGgsIHZvaWQgMCwgdGhpcy5fZmlsZVBhdGgpO1xuXG4gICAgICAgIHJldHVybiBvbWl0KHBhcnNlZC5vcHRpb25zLCBUWVBFU0NSSVBUX0JMQUNLTElTVEVEX09QVElPTlMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX25vdGlmeVRoYXRPcHRpb25zQ2Fubm90QmVPdmVycmlkZGVuICgpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgd2FybmVkT3B0aW9ucyA9IGludGVyc2VjdGlvbih0aGlzLl9vdmVycmlkZGVuT3B0aW9ucywgVFlQRVNDUklQVF9DT01QSUxFUl9OT05fT1ZFUlJJREFCTEVfT1BUSU9OUyk7XG5cbiAgICAgICAgaWYgKCF3YXJuZWRPcHRpb25zLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjb25zdCB3YXJuaW5nTWVzc2FnZSA9IHdhcm5lZE9wdGlvbnNcbiAgICAgICAgICAgIC5tYXAob3B0aW9uID0+IHJlbmRlclRlbXBsYXRlKFdBUk5JTkdfTUVTU0FHRVMuY2Fubm90T3ZlcnJpZGVUeXBlU2NyaXB0Q29uZmlnT3B0aW9ucywgb3B0aW9uKSlcbiAgICAgICAgICAgIC5qb2luKCdcXG4nKTtcblxuICAgICAgICBDb25maWd1cmF0aW9uLl9zaG93Q29uc29sZVdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfc2V0T3B0aW9uVmFsdWUgKG9wdGlvbjogT3B0aW9uLCB2YWx1ZTogT3B0aW9uVmFsdWUpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFUWVBFU0NSSVBUX0NPTVBJTEVSX05PTl9PVkVSUklEQUJMRV9PUFRJT05TLmluY2x1ZGVzKG9wdGlvbi5uYW1lKSlcbiAgICAgICAgICAgIHN1cGVyLl9zZXRPcHRpb25WYWx1ZShvcHRpb24sIHZhbHVlKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5fYWRkT3ZlcnJpZGRlbk9wdGlvbklmTmVjZXNzYXJ5KG9wdGlvbi52YWx1ZSwgdmFsdWUsIG9wdGlvbi5zb3VyY2UsIG9wdGlvbi5uYW1lKTtcbiAgICB9XG59XG4iXX0=