"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const FILTERING_OPTIONS = {
    testGrep: 'testGrep',
    fixtureGrep: 'fixtureGrep',
    testMeta: 'testMeta',
    fixtureMeta: 'fixtureMeta',
    test: 'test',
    fixture: 'fixture',
};
function isAllFilteringOptionsAreUndefined(opts) {
    return Object
        .keys(FILTERING_OPTIONS)
        .every(option => opts[option] === void 0);
}
function createFilterFn(opts) {
    return (testName, fixtureName, fixturePath, testMeta, fixtureMeta) => {
        if (opts.test && testName !== opts.test)
            return false;
        if (opts.testGrep && !opts.testGrep.test(testName))
            return false;
        if (opts.fixture && fixtureName !== opts.fixture)
            return false;
        if (opts.fixtureGrep && !opts.fixtureGrep.test(fixtureName))
            return false;
        if (opts.testMeta && !lodash_1.isMatch(testMeta, opts.testMeta))
            return false;
        if (opts.fixtureMeta && !lodash_1.isMatch(fixtureMeta, opts.fixtureMeta))
            return false;
        return true;
    };
}
function default_1(opts) {
    const filteringOpts = lodash_1.pick(opts, Object.keys(FILTERING_OPTIONS));
    if (isAllFilteringOptionsAreUndefined(filteringOpts))
        return void 0;
    return Object.assign(createFilterFn(filteringOpts), filteringOpts);
}
exports.default = default_1;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWZpbHRlci1mbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9nZXQtZmlsdGVyLWZuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXVDO0FBRXZDLE1BQU0saUJBQWlCLEdBQUc7SUFDdEIsUUFBUSxFQUFLLFVBQVU7SUFDdkIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsUUFBUSxFQUFLLFVBQVU7SUFDdkIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsSUFBSSxFQUFTLE1BQU07SUFDbkIsT0FBTyxFQUFNLFNBQVM7Q0FDekIsQ0FBQztBQUVGLFNBQVMsaUNBQWlDLENBQUUsSUFBSTtJQUM1QyxPQUFPLE1BQU07U0FDUixJQUFJLENBQUMsaUJBQWlCLENBQUM7U0FDdkIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFFLElBQUk7SUFDekIsT0FBTyxDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsRUFBRTtRQUNqRSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksUUFBUSxLQUFLLElBQUksQ0FBQyxJQUFJO1lBQ25DLE9BQU8sS0FBSyxDQUFDO1FBRWpCLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUM5QyxPQUFPLEtBQUssQ0FBQztRQUVqQixJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksV0FBVyxLQUFLLElBQUksQ0FBQyxPQUFPO1lBQzVDLE9BQU8sS0FBSyxDQUFDO1FBRWpCLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUN2RCxPQUFPLEtBQUssQ0FBQztRQUVqQixJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxnQkFBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ2xELE9BQU8sS0FBSyxDQUFDO1FBRWpCLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLGdCQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDM0QsT0FBTyxLQUFLLENBQUM7UUFFakIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUVELG1CQUF5QixJQUFJO0lBQ3pCLE1BQU0sYUFBYSxHQUFHLGFBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFFakUsSUFBSSxpQ0FBaUMsQ0FBQyxhQUFhLENBQUM7UUFDaEQsT0FBTyxLQUFLLENBQUMsQ0FBQztJQUVsQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3ZFLENBQUM7QUFQRCw0QkFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTWF0Y2gsIHBpY2sgfSBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBGSUxURVJJTkdfT1BUSU9OUyA9IHtcbiAgICB0ZXN0R3JlcDogICAgJ3Rlc3RHcmVwJyxcbiAgICBmaXh0dXJlR3JlcDogJ2ZpeHR1cmVHcmVwJyxcbiAgICB0ZXN0TWV0YTogICAgJ3Rlc3RNZXRhJyxcbiAgICBmaXh0dXJlTWV0YTogJ2ZpeHR1cmVNZXRhJyxcbiAgICB0ZXN0OiAgICAgICAgJ3Rlc3QnLFxuICAgIGZpeHR1cmU6ICAgICAnZml4dHVyZScsXG59O1xuXG5mdW5jdGlvbiBpc0FsbEZpbHRlcmluZ09wdGlvbnNBcmVVbmRlZmluZWQgKG9wdHMpIHtcbiAgICByZXR1cm4gT2JqZWN0XG4gICAgICAgIC5rZXlzKEZJTFRFUklOR19PUFRJT05TKVxuICAgICAgICAuZXZlcnkob3B0aW9uID0+IG9wdHNbb3B0aW9uXSA9PT0gdm9pZCAwKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmlsdGVyRm4gKG9wdHMpIHtcbiAgICByZXR1cm4gKHRlc3ROYW1lLCBmaXh0dXJlTmFtZSwgZml4dHVyZVBhdGgsIHRlc3RNZXRhLCBmaXh0dXJlTWV0YSkgPT4ge1xuICAgICAgICBpZiAob3B0cy50ZXN0ICYmIHRlc3ROYW1lICE9PSBvcHRzLnRlc3QpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKG9wdHMudGVzdEdyZXAgJiYgIW9wdHMudGVzdEdyZXAudGVzdCh0ZXN0TmFtZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKG9wdHMuZml4dHVyZSAmJiBmaXh0dXJlTmFtZSAhPT0gb3B0cy5maXh0dXJlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmIChvcHRzLmZpeHR1cmVHcmVwICYmICFvcHRzLmZpeHR1cmVHcmVwLnRlc3QoZml4dHVyZU5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmIChvcHRzLnRlc3RNZXRhICYmICFpc01hdGNoKHRlc3RNZXRhLCBvcHRzLnRlc3RNZXRhKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAob3B0cy5maXh0dXJlTWV0YSAmJiAhaXNNYXRjaChmaXh0dXJlTWV0YSwgb3B0cy5maXh0dXJlTWV0YSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKG9wdHMpIHtcbiAgICBjb25zdCBmaWx0ZXJpbmdPcHRzID0gcGljayhvcHRzLCBPYmplY3Qua2V5cyhGSUxURVJJTkdfT1BUSU9OUykpO1xuXG4gICAgaWYgKGlzQWxsRmlsdGVyaW5nT3B0aW9uc0FyZVVuZGVmaW5lZChmaWx0ZXJpbmdPcHRzKSlcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGNyZWF0ZUZpbHRlckZuKGZpbHRlcmluZ09wdHMpLCBmaWx0ZXJpbmdPcHRzKTtcbn1cbiJdfQ==