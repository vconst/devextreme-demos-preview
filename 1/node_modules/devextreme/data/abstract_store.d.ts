/**
* DevExtreme (data/abstract_store.d.ts)
* Version: 21.2.0 (build 21212-0323)
* Build date: Sat Jul 31 2021
*
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
*/
import { DxPromise } from '../core/utils/deferred';
import { FilterDescriptor, GroupDescriptor, LoadOptions } from './index'

/**
 * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
 */
export interface StoreOptions<TKey = any, TValue = any> {
    /**
     * Specifies the function that is executed when the store throws an error.
     */
    errorHandler?: Function;
    /**
     * Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique.
     */
    key?: string | Array<string>;
    /**
     * A function that is executed after a data item is added to the store.
     */
    onInserted?: ((values: TValue, key: TKey) => void);
    /**
     * A function that is executed before a data item is added to the store.
     */
    onInserting?: ((values: TValue) => void);
    /**
     * A function that is executed after data is loaded to the store.
     */
    onLoaded?: ((result: Array<TValue>, loadOptions: LoadOptions<TValue>) => void);
    /**
     * A function that is executed before data is loaded to the store.
     */
    onLoading?: ((loadOptions: LoadOptions<TValue>) => void);
    /**
     * A function that is executed after a data item is added, updated, or removed from the store.
     */
    onModified?: Function;
    /**
     * A function that is executed before a data item is added, updated, or removed from the store.
     */
    onModifying?: Function;
    /**
     * The function executed before changes are pushed to the store.
     */
    onPush?: ((changes: Array<TValue>) => void);
    /**
     * A function that is executed after a data item is removed from the store.
     */
    onRemoved?: ((key: TKey) => void);
    /**
     * A function that is executed before a data item is removed from the store.
     */
    onRemoving?: ((key: TKey) => void);
    /**
     * A function that is executed after a data item is updated in the store.
     */
    onUpdated?: ((key: TKey, values: TValue) => void);
    /**
     * A function that is executed before a data item is updated in the store.
     */
    onUpdating?: ((key: TKey, values: TValue) => void);
}

/**
 * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
 */
type EventName = 'loaded'|'loading'|'inserted'|'inserting'|'updated'|'updating'|'push'|'removed'|'removing'|'modified'|'modifying';

/**
 * The base class for all Stores.
 * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
 */
export default class Store<TKey = any, TValue = any> {
    constructor(options?: StoreOptions<TKey, TValue>)
    /**
     * Gets a data item with a specific key.
     */
    byKey(key: TKey, extraOptions?: LoadOptions<TValue>): DxPromise<TValue>;
    /**
     * Adds a data item to the store.
     */
    insert(values: TValue): DxPromise<TValue>;
    /**
     * Gets the key property (or properties) as specified in the key property.
     */
    key(): string | Array<string>;
    /**
     * Gets a data item&apos;s key value.
     */
    keyOf(obj: TValue): TKey;
    /**
     * Starts loading data.
     */
    load(): DxPromise<Array<TValue>>;
    /**
     * Starts loading data.
     */
    load(options: LoadOptions<TValue>): DxPromise<Array<TValue>>;
    /**
     * Detaches all event handlers from a single event.
     */
    off(eventName: EventName): this;
    /**
     * Detaches a particular event handler from a single event.
     */
    off(eventName: EventName, eventHandler: Function): this;
    /**
     * Subscribes to an event.
     */
    on(eventName: EventName, eventHandler: Function): this;
    /**
     * Subscribes to events.
     */
    on(events: {[key in EventName]?: Function}): this;
    /**
     * Pushes data changes to the store and notifies the DataSource.
     */
    push(changes: Array<{type: 'insert' | 'update' | 'remove', data?: TValue, key?: TKey, index?: number}>): void;
    /**
     * Removes a data item with a specific key from the store.
     */
    remove(key: TKey): DxPromise<void>;
    /**
     * Gets the total count of items the load() function returns.
     */
    totalCount(obj: { filter?: FilterDescriptor | Array<FilterDescriptor>, group?: GroupDescriptor<TValue> | Array<GroupDescriptor<TValue>> }): DxPromise<number>;
    /**
     * Updates a data item with a specific key.
     */
    update(key: TKey, values: TValue): DxPromise<TValue>;
}
