/**
 * DevExtreme (cjs/ui/scheduler/appointments/DataProvider/appointmentDataProvider.js)
 * Version: 21.2.0 (build 21212-0323)
 * Build date: Sat Jul 31 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.AppointmentDataProvider = void 0;
var _appointmentDataSource = require("./appointmentDataSource");
var _appointmentFilter = require("./appointmentFilter");

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    return Constructor
}
var FilterStrategies = {
    virtual: "virtual",
    standard: "standard"
};
var AppointmentDataProvider = function() {
    function AppointmentDataProvider(options) {
        this.options = options;
        this.key = this.options.key;
        this.scheduler = this.options.scheduler;
        this.dataSource = this.options.dataSource;
        this.dataAccessors = this.options.getDataAccessors(this.key);
        this.filteredItems = [];
        this.appointmentDataSource = new _appointmentDataSource.AppointmentDataSource(this.dataSource);
        this.initFilterStrategy()
    }
    var _proto = AppointmentDataProvider.prototype;
    _proto.getDataAccessors = function() {
        return this.dataAccessors
    };
    _proto.getFilterStrategy = function() {
        if (!this.filterStrategy || this.filterStrategy.strategyName !== this.filterStrategyName) {
            this.initFilterStrategy()
        }
        return this.filterStrategy
    };
    _proto.initFilterStrategy = function() {
        var filterOptions = {
            key: this.key,
            scheduler: this.scheduler,
            dataSource: this.dataSource,
            dataAccessors: this.dataAccessors,
            startDayHour: this.options.startDayHour,
            endDayHour: this.options.endDayHour,
            appointmentDuration: this.options.appointmentDuration,
            showAllDayPanel: this.options.showAllDayPanel,
            timeZoneCalculator: this.options.timeZoneCalculator,
            resourceManager: this.options.resourceManager
        };
        this.filterStrategy = this.filterStrategyName === FilterStrategies.virtual ? new _appointmentFilter.AppointmentFilterVirtualStrategy(filterOptions) : new _appointmentFilter.AppointmentFilterBaseStrategy(filterOptions)
    };
    _proto.setDataSource = function(dataSource) {
        this.dataSource = dataSource;
        this.initFilterStrategy();
        this.appointmentDataSource.setDataSource(this.dataSource)
    };
    _proto.updateDataAccessors = function(dataAccessors) {
        this.dataAccessors = dataAccessors;
        this.initFilterStrategy()
    };
    _proto.filter = function() {
        this.filteredItems = this.getFilterStrategy().filter()
    };
    _proto.filterByDate = function(min, max, remoteFiltering, dateSerializationFormat) {
        this.getFilterStrategy().filterByDate(min, max, remoteFiltering, dateSerializationFormat)
    };
    _proto.appointmentTakesAllDay = function(appointment, startDayHour, endDayHour) {
        return this.getFilterStrategy().appointmentTakesAllDay(appointment, startDayHour, endDayHour)
    };
    _proto.hasAllDayAppointments = function(appointments) {
        return this.getFilterStrategy().hasAllDayAppointments(appointments)
    };
    _proto.filterLoadedAppointments = function(filterOption, timeZoneCalculator) {
        return this.getFilterStrategy().filterLoadedAppointments(filterOption, timeZoneCalculator)
    };
    _proto.replaceWrongEndDate = function(appointment, startDate, endDate) {
        this.getFilterStrategy().replaceWrongEndDate(appointment, startDate, endDate)
    };
    _proto.calculateAppointmentEndDate = function(isAllDay, startDate) {
        return this.getFilterStrategy().calculateAppointmentEndDate(isAllDay, startDate)
    };
    _proto.appointmentTakesSeveralDays = function(appointment) {
        return this.getFilterStrategy().appointmentTakesSeveralDays(appointment)
    };
    _proto.cleanState = function() {
        this.appointmentDataSource.cleanState()
    };
    _proto.getUpdatedAppointment = function() {
        return this.appointmentDataSource._updatedAppointment
    };
    _proto.getUpdatedAppointmentKeys = function() {
        return this.appointmentDataSource._updatedAppointmentKeys
    };
    _proto.add = function(rawAppointment) {
        return this.appointmentDataSource.add(rawAppointment)
    };
    _proto.update = function(target, rawAppointment) {
        return this.appointmentDataSource.update(target, rawAppointment)
    };
    _proto.remove = function(rawAppointment) {
        return this.appointmentDataSource.remove(rawAppointment)
    };
    _createClass(AppointmentDataProvider, [{
        key: "filterMaker",
        get: function() {
            return this.getFilterStrategy().filterMaker
        }
    }, {
        key: "keyName",
        get: function() {
            return this.appointmentDataSource.keyName
        }
    }, {
        key: "filterStrategyName",
        get: function() {
            return this.options.getIsVirtualScrolling() ? FilterStrategies.virtual : FilterStrategies.standard
        }
    }]);
    return AppointmentDataProvider
}();
exports.AppointmentDataProvider = AppointmentDataProvider;
