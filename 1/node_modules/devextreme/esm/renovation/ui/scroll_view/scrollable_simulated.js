/**
 * DevExtreme (esm/renovation/ui/scroll_view/scrollable_simulated.js)
 * Version: 21.2.0 (build 21212-0323)
 * Build date: Sat Jul 31 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
var _excluded = ["aria", "bounceEnabled", "children", "classes", "contentTranslateOffsetChange", "direction", "disabled", "forceGeneratePockets", "height", "inertiaEnabled", "needScrollViewContentWrapper", "needScrollViewLoadPanel", "onBounce", "onEnd", "onKeyDown", "onPullDown", "onReachBottom", "onScroll", "onStart", "onUpdated", "onVisibilityChange", "pocketStateChange", "pullDownEnabled", "pulledDownText", "pullingDownText", "reachBottomEnabled", "reachBottomText", "refreshingText", "rtlEnabled", "scrollByContent", "scrollByThumb", "scrollLocationChange", "showScrollbar", "useKeyboard", "useNative", "useSimulatedScrollbar", "visible", "width"];
import {
    createVNode,
    createComponentVNode,
    normalizeProps
} from "inferno";
import {
    InfernoEffect,
    InfernoComponent,
    normalizeStyles
} from "@devextreme/vdom";
import {
    subscribeToScrollEvent
} from "../../utils/subscribe_to_event";
import {
    ScrollViewLoadPanel
} from "./load_panel";
import {
    AnimatedScrollbar
} from "./animated_scrollbar";
import {
    Widget
} from "../common/widget";
import {
    combineClasses
} from "../../utils/combine_classes";
import {
    getBoundaryProps
} from "./utils/get_boundary_props";
import {
    getElementLocationInternal
} from "./utils/get_element_location_internal";
import {
    isDxMouseWheelEvent,
    normalizeKeyName,
    isCommandKeyPressed
} from "../../../events/utils/index";
import {
    getWindow,
    hasWindow
} from "../../../core/utils/window";
import {
    isDefined
} from "../../../core/utils/type";
import {
    ScrollableSimulatedPropsType
} from "./scrollable_simulated_props";
import "../../../events/gesture/emitter.gesture.scroll";
import eventsEngine from "../../../events/core/events_engine";
import {
    ScrollDirection
} from "./utils/scroll_direction";
import {
    DIRECTION_VERTICAL,
    DIRECTION_HORIZONTAL,
    SCROLLABLE_SIMULATED_CLASS,
    SCROLLABLE_CONTAINER_CLASS,
    SCROLLABLE_CONTENT_CLASS,
    SCROLLABLE_WRAPPER_CLASS,
    SCROLLVIEW_CONTENT_CLASS,
    SCROLLABLE_DISABLED_CLASS,
    SCROLLABLE_SCROLLBARS_ALWAYSVISIBLE,
    SCROLL_LINE_HEIGHT,
    SCROLLABLE_SCROLLBAR_CLASS,
    DIRECTION_BOTH,
    KEY_CODES,
    VALIDATE_WHEEL_TIMEOUT,
    TopPocketState
} from "./common/consts";
import {
    getElementOffset
} from "../../utils/get_element_offset";
import {
    getElementComputedStyle
} from "./utils/get_element_computed_style";
import {
    TopPocket
} from "./top_pocket";
import {
    BottomPocket
} from "./bottom_pocket";
import {
    dxScrollInit,
    dxScrollStart,
    dxScrollMove,
    dxScrollEnd,
    dxScrollStop,
    dxScrollCancel,
    keyDown
} from "../../../events/short";
import {
    getOffsetDistance
} from "./utils/get_offset_distance";
import {
    convertToLocation
} from "./utils/convert_location";
import {
    getScrollTopMax
} from "./utils/get_scroll_top_max";
import {
    getScrollLeftMax
} from "./utils/get_scroll_left_max";
import {
    inRange
} from "../../../core/utils/math";
import {
    isVisible
} from "./utils/is_element_visible";
import {
    getElementPaddingBottom
} from "./utils/get_element_padding";
var DEFAULT_OFFSET = {
    top: 0,
    left: 0
};
export var viewFunction = viewModel => {
    var {
        bottomPocketClientHeight: bottomPocketClientHeight,
        bottomPocketRef: bottomPocketRef,
        containerClientHeight: containerClientHeight,
        containerClientWidth: containerClientWidth,
        containerRef: containerRef,
        containerStyles: containerStyles,
        contentHeight: contentHeight,
        contentPaddingBottom: contentPaddingBottom,
        contentRef: contentRef,
        contentStyles: contentStyles,
        contentTranslateOffsetChange: contentTranslateOffsetChange,
        contentWidth: contentWidth,
        cssClasses: cssClasses,
        cursorEnterHandler: cursorEnterHandler,
        cursorLeaveHandler: cursorLeaveHandler,
        direction: direction,
        hScrollLocation: hScrollLocation,
        hScrollbarRef: hScrollbarRef,
        handleKeyDown: handleKeyDown,
        isHovered: isHovered,
        isLoadPanelVisible: isLoadPanelVisible,
        lock: lock,
        onBounce: onBounce,
        onEnd: onEnd,
        onPullDown: onPullDown,
        onReachBottom: onReachBottom,
        onRelease: onRelease,
        onScroll: onScroll,
        onVisibilityChangeHandler: onVisibilityChangeHandler,
        pocketStateChange: pocketStateChange,
        props: {
            aria: aria,
            bounceEnabled: bounceEnabled,
            children: children,
            disabled: disabled,
            forceGeneratePockets: forceGeneratePockets,
            height: height,
            inertiaEnabled: inertiaEnabled,
            needScrollViewContentWrapper: needScrollViewContentWrapper,
            needScrollViewLoadPanel: needScrollViewLoadPanel,
            pullDownEnabled: pullDownEnabled,
            pulledDownText: pulledDownText,
            pullingDownText: pullingDownText,
            reachBottomEnabled: reachBottomEnabled,
            reachBottomText: reachBottomText,
            refreshingText: refreshingText,
            rtlEnabled: rtlEnabled,
            scrollByThumb: scrollByThumb,
            showScrollbar: showScrollbar,
            useKeyboard: useKeyboard,
            visible: visible,
            width: width
        },
        restAttributes: restAttributes,
        scrollLocationChange: scrollLocationChange,
        scrollViewContentRef: scrollViewContentRef,
        scrollableOffsetLeft: scrollableOffsetLeft,
        scrollableOffsetTop: scrollableOffsetTop,
        scrollableRef: scrollableRef,
        topPocketClientHeight: topPocketClientHeight,
        topPocketRef: topPocketRef,
        topPocketState: topPocketState,
        unlock: unlock,
        updateHandler: updateHandler,
        vScrollLocation: vScrollLocation,
        vScrollbarRef: vScrollbarRef,
        wrapperRef: wrapperRef
    } = viewModel;
    return normalizeProps(createComponentVNode(2, Widget, _extends({
        rootElementRef: scrollableRef,
        focusStateEnabled: useKeyboard,
        hoverStateEnabled: true,
        aria: aria,
        addWidgetClass: false,
        classes: cssClasses,
        disabled: disabled,
        rtlEnabled: rtlEnabled,
        height: height,
        width: width,
        visible: visible,
        onKeyDown: useKeyboard ? handleKeyDown : void 0,
        onHoverStart: cursorEnterHandler,
        onHoverEnd: cursorLeaveHandler,
        onDimensionChanged: updateHandler,
        onVisibilityChange: onVisibilityChangeHandler
    }, restAttributes, {
        children: [createVNode(1, "div", SCROLLABLE_WRAPPER_CLASS, createVNode(1, "div", SCROLLABLE_CONTAINER_CLASS, [createVNode(1, "div", SCROLLABLE_CONTENT_CLASS, [forceGeneratePockets && createComponentVNode(2, TopPocket, {
            topPocketRef: topPocketRef,
            pullingDownText: pullingDownText,
            pulledDownText: pulledDownText,
            refreshingText: refreshingText,
            refreshStrategy: "simulated",
            pocketState: topPocketState,
            visible: !!pullDownEnabled
        }), needScrollViewContentWrapper ? createVNode(1, "div", SCROLLVIEW_CONTENT_CLASS, children, 0, null, null, scrollViewContentRef) : children, forceGeneratePockets && createComponentVNode(2, BottomPocket, {
            bottomPocketRef: bottomPocketRef,
            reachBottomText: reachBottomText,
            visible: !!reachBottomEnabled
        })], 0, {
            style: normalizeStyles(contentStyles)
        }, null, contentRef), direction.isHorizontal && createComponentVNode(2, AnimatedScrollbar, {
            direction: "horizontal",
            scrollableOffset: scrollableOffsetLeft,
            contentSize: contentWidth,
            containerSize: containerClientWidth,
            isScrollableHovered: isHovered,
            scrollLocation: hScrollLocation,
            scrollLocationChange: scrollLocationChange,
            contentTranslateOffsetChange: contentTranslateOffsetChange,
            scrollByThumb: scrollByThumb,
            bounceEnabled: bounceEnabled,
            showScrollbar: showScrollbar,
            inertiaEnabled: inertiaEnabled,
            onBounce: onBounce,
            onScroll: onScroll,
            onEnd: onEnd,
            rtlEnabled: rtlEnabled
        }, null, hScrollbarRef), direction.isVertical && createComponentVNode(2, AnimatedScrollbar, {
            direction: "vertical",
            scrollableOffset: scrollableOffsetTop,
            contentSize: contentHeight,
            containerSize: containerClientHeight,
            isScrollableHovered: isHovered,
            scrollLocation: vScrollLocation,
            scrollLocationChange: scrollLocationChange,
            contentTranslateOffsetChange: contentTranslateOffsetChange,
            scrollByThumb: scrollByThumb,
            bounceEnabled: bounceEnabled,
            showScrollbar: showScrollbar,
            inertiaEnabled: inertiaEnabled,
            onBounce: onBounce,
            onScroll: onScroll,
            onEnd: onEnd,
            forceGeneratePockets: forceGeneratePockets,
            topPocketSize: topPocketClientHeight,
            bottomPocketSize: bottomPocketClientHeight,
            contentPaddingBottom: contentPaddingBottom,
            onPullDown: onPullDown,
            onRelease: onRelease,
            onReachBottom: onReachBottom,
            pullDownEnabled: pullDownEnabled,
            reachBottomEnabled: reachBottomEnabled,
            pocketState: topPocketState,
            pocketStateChange: pocketStateChange,
            onLock: lock,
            onUnlock: unlock
        }, null, vScrollbarRef)], 0, {
            style: normalizeStyles(containerStyles)
        }, null, containerRef), 2, null, null, wrapperRef), needScrollViewLoadPanel && createComponentVNode(2, ScrollViewLoadPanel, {
            targetElement: scrollableRef,
            refreshingText: refreshingText,
            visible: isLoadPanelVisible
        })]
    })))
};
import {
    createRef as infernoCreateRef
} from "inferno";
export class ScrollableSimulated extends InfernoComponent {
    constructor(props) {
        super(props);
        this.locked = false;
        this.loadingIndicatorEnabled = true;
        this.validDirections = {};
        this.endActionDirections = {
            horizontal: false,
            vertical: false
        };
        this.tabWasPressed = false;
        this.savedScrollOffset = {
            top: 0,
            left: 0
        };
        this.scrollableRef = infernoCreateRef();
        this.wrapperRef = infernoCreateRef();
        this.contentRef = infernoCreateRef();
        this.scrollViewContentRef = infernoCreateRef();
        this.containerRef = infernoCreateRef();
        this.vScrollbarRef = infernoCreateRef();
        this.hScrollbarRef = infernoCreateRef();
        this.topPocketRef = infernoCreateRef();
        this.bottomPocketRef = infernoCreateRef();
        this.state = {
            isHovered: false,
            scrollableOffsetLeft: 0,
            scrollableOffsetTop: 0,
            containerClientWidth: 0,
            containerClientHeight: 0,
            contentScrollWidth: 0,
            contentScrollHeight: 0,
            contentClientWidth: 0,
            contentClientHeight: 0,
            contentPaddingBottom: 0,
            topPocketClientHeight: 0,
            bottomPocketClientHeight: 0,
            topPocketState: TopPocketState.STATE_RELEASED,
            isLoadPanelVisible: false,
            vScrollLocation: 0,
            hScrollLocation: 0,
            vContentTranslateOffset: 0,
            hContentTranslateOffset: 0
        };
        this.content = this.content.bind(this);
        this.container = this.container.bind(this);
        this.refresh = this.refresh.bind(this);
        this.release = this.release.bind(this);
        this.scrollBy = this.scrollBy.bind(this);
        this.scrollTo = this.scrollTo.bind(this);
        this.scrollToElement = this.scrollToElement.bind(this);
        this.getElementLocation = this.getElementLocation.bind(this);
        this.scrollHeight = this.scrollHeight.bind(this);
        this.scrollWidth = this.scrollWidth.bind(this);
        this.scrollOffset = this.scrollOffset.bind(this);
        this.scrollTop = this.scrollTop.bind(this);
        this.scrollLeft = this.scrollLeft.bind(this);
        this.clientHeight = this.clientHeight.bind(this);
        this.clientWidth = this.clientWidth.bind(this);
        this.disposeWheelTimer = this.disposeWheelTimer.bind(this);
        this.scrollEffect = this.scrollEffect.bind(this);
        this.keyboardEffect = this.keyboardEffect.bind(this);
        this.initEffect = this.initEffect.bind(this);
        this.startEffect = this.startEffect.bind(this);
        this.moveEffect = this.moveEffect.bind(this);
        this.endEffect = this.endEffect.bind(this);
        this.stopEffect = this.stopEffect.bind(this);
        this.validate = this.validate.bind(this);
        this.moveIsAllowed = this.moveIsAllowed.bind(this);
        this.cancelEffect = this.cancelEffect.bind(this);
        this.effectDisabledState = this.effectDisabledState.bind(this);
        this.effectResetInactiveState = this.effectResetInactiveState.bind(this);
        this.updateScrollbarSize = this.updateScrollbarSize.bind(this);
        this.scrollByLocation = this.scrollByLocation.bind(this);
        this.calcScrollByDeltaY = this.calcScrollByDeltaY.bind(this);
        this.calcScrollByDeltaX = this.calcScrollByDeltaX.bind(this);
        this.updateHandler = this.updateHandler.bind(this);
        this.handleScroll = this.handleScroll.bind(this);
        this.startLoading = this.startLoading.bind(this);
        this.finishLoading = this.finishLoading.bind(this);
        this.getEventArgs = this.getEventArgs.bind(this);
        this.getInitEventData = this.getInitEventData.bind(this);
        this.onStart = this.onStart.bind(this);
        this.onEnd = this.onEnd.bind(this);
        this.onUpdated = this.onUpdated.bind(this);
        this.onBounce = this.onBounce.bind(this);
        this.onPullDown = this.onPullDown.bind(this);
        this.onRelease = this.onRelease.bind(this);
        this.onReachBottom = this.onReachBottom.bind(this);
        this.pocketStateChange = this.pocketStateChange.bind(this);
        this.scrollLocationChange = this.scrollLocationChange.bind(this);
        this.onScroll = this.onScroll.bind(this);
        this.contentTranslateOffsetChange = this.contentTranslateOffsetChange.bind(this);
        this.cursorEnterHandler = this.cursorEnterHandler.bind(this);
        this.cursorLeaveHandler = this.cursorLeaveHandler.bind(this);
        this.handleInit = this.handleInit.bind(this);
        this.handleStart = this.handleStart.bind(this);
        this.handleMove = this.handleMove.bind(this);
        this.handleEnd = this.handleEnd.bind(this);
        this.handleStop = this.handleStop.bind(this);
        this.handleCancel = this.handleCancel.bind(this);
        this.isCrossThumbScrolling = this.isCrossThumbScrolling.bind(this);
        this.adjustDistance = this.adjustDistance.bind(this);
        this.suppressDirections = this.suppressDirections.bind(this);
        this.validateEvent = this.validateEvent.bind(this);
        this.prepareDirections = this.prepareDirections.bind(this);
        this.isContent = this.isContent.bind(this);
        this.eventHandler = this.eventHandler.bind(this);
        this.tryGetAllowedDirection = this.tryGetAllowedDirection.bind(this);
        this.allowedDirection = this.allowedDirection.bind(this);
        this.isLocked = this.isLocked.bind(this);
        this.validateWheel = this.validateWheel.bind(this);
        this.clearWheelValidationTimer = this.clearWheelValidationTimer.bind(this);
        this.validateMove = this.validateMove.bind(this);
        this.handleTabKey = this.handleTabKey.bind(this);
        this.handleKeyDown = this.handleKeyDown.bind(this);
        this.scrollByLine = this.scrollByLine.bind(this);
        this.tryGetDevicePixelRatio = this.tryGetDevicePixelRatio.bind(this);
        this.scrollByPage = this.scrollByPage.bind(this);
        this.wheelDirection = this.wheelDirection.bind(this);
        this.scrollToHome = this.scrollToHome.bind(this);
        this.scrollToEnd = this.scrollToEnd.bind(this);
        this.lock = this.lock.bind(this);
        this.unlock = this.unlock.bind(this);
        this.onVisibilityChangeHandler = this.onVisibilityChangeHandler.bind(this);
        this.updateSizes = this.updateSizes.bind(this)
    }
    createEffects() {
        return [new InfernoEffect(this.disposeWheelTimer, []), new InfernoEffect(this.scrollEffect, [this.state.hScrollLocation, this.state.vScrollLocation, this.props.direction, this.state.topPocketClientHeight]), new InfernoEffect(this.keyboardEffect, []), new InfernoEffect(this.initEffect, [this.props.direction, this.props.scrollByContent, this.props.scrollByThumb, this.state.contentClientHeight, this.state.contentScrollHeight, this.state.containerClientHeight, this.props.bounceEnabled, this.state.contentClientWidth, this.state.contentScrollWidth, this.state.containerClientWidth, this.props.onUpdated, this.state.topPocketClientHeight, this.props.disabled]), new InfernoEffect(this.startEffect, [this.props.direction, this.props.onStart, this.state.topPocketClientHeight]), new InfernoEffect(this.moveEffect, [this.props.direction]), new InfernoEffect(this.endEffect, [this.props.direction]), new InfernoEffect(this.stopEffect, [this.props.direction]), new InfernoEffect(this.cancelEffect, [this.props.direction]), new InfernoEffect(this.effectDisabledState, [this.props.disabled]), new InfernoEffect(this.effectResetInactiveState, [this.props.direction]), new InfernoEffect(this.updateScrollbarSize, [this.state.isHovered, this.state.scrollableOffsetLeft, this.state.scrollableOffsetTop, this.state.containerClientWidth, this.state.containerClientHeight, this.state.contentScrollWidth, this.state.contentScrollHeight, this.state.contentClientWidth, this.state.contentClientHeight, this.state.contentPaddingBottom, this.state.topPocketClientHeight, this.state.bottomPocketClientHeight, this.state.topPocketState, this.state.isLoadPanelVisible, this.state.vScrollLocation, this.state.hScrollLocation, this.state.vContentTranslateOffset, this.state.hContentTranslateOffset, this.props.inertiaEnabled, this.props.useKeyboard, this.props.onStart, this.props.onEnd, this.props.onBounce, this.props.contentTranslateOffsetChange, this.props.scrollLocationChange, this.props.pocketStateChange, this.props.children, this.props.useNative, this.props.direction, this.props.showScrollbar, this.props.bounceEnabled, this.props.scrollByContent, this.props.scrollByThumb, this.props.classes, this.props.pullDownEnabled, this.props.reachBottomEnabled, this.props.forceGeneratePockets, this.props.needScrollViewContentWrapper, this.props.needScrollViewLoadPanel, this.props.onScroll, this.props.onUpdated, this.props.onPullDown, this.props.onReachBottom, this.props.useSimulatedScrollbar, this.props.pullingDownText, this.props.pulledDownText, this.props.refreshingText, this.props.reachBottomText, this.props.aria, this.props.onVisibilityChange, this.props.disabled, this.props.height, this.props.onKeyDown, this.props.rtlEnabled, this.props.visible, this.props.width])]
    }
    updateEffects() {
        var _this$_effects$, _this$_effects$2, _this$_effects$3, _this$_effects$4, _this$_effects$5, _this$_effects$6, _this$_effects$7, _this$_effects$8, _this$_effects$9, _this$_effects$10, _this$_effects$11;
        null === (_this$_effects$ = this._effects[1]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.state.hScrollLocation, this.state.vScrollLocation, this.props.direction, this.state.topPocketClientHeight]);
        null === (_this$_effects$2 = this._effects[2]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([]);
        null === (_this$_effects$3 = this._effects[3]) || void 0 === _this$_effects$3 ? void 0 : _this$_effects$3.update([this.props.direction, this.props.scrollByContent, this.props.scrollByThumb, this.state.contentClientHeight, this.state.contentScrollHeight, this.state.containerClientHeight, this.props.bounceEnabled, this.state.contentClientWidth, this.state.contentScrollWidth, this.state.containerClientWidth, this.props.onUpdated, this.state.topPocketClientHeight, this.props.disabled]);
        null === (_this$_effects$4 = this._effects[4]) || void 0 === _this$_effects$4 ? void 0 : _this$_effects$4.update([this.props.direction, this.props.onStart, this.state.topPocketClientHeight]);
        null === (_this$_effects$5 = this._effects[5]) || void 0 === _this$_effects$5 ? void 0 : _this$_effects$5.update([this.props.direction]);
        null === (_this$_effects$6 = this._effects[6]) || void 0 === _this$_effects$6 ? void 0 : _this$_effects$6.update([this.props.direction]);
        null === (_this$_effects$7 = this._effects[7]) || void 0 === _this$_effects$7 ? void 0 : _this$_effects$7.update([this.props.direction]);
        null === (_this$_effects$8 = this._effects[8]) || void 0 === _this$_effects$8 ? void 0 : _this$_effects$8.update([this.props.direction]);
        null === (_this$_effects$9 = this._effects[9]) || void 0 === _this$_effects$9 ? void 0 : _this$_effects$9.update([this.props.disabled]);
        null === (_this$_effects$10 = this._effects[10]) || void 0 === _this$_effects$10 ? void 0 : _this$_effects$10.update([this.props.direction]);
        null === (_this$_effects$11 = this._effects[11]) || void 0 === _this$_effects$11 ? void 0 : _this$_effects$11.update([this.state.isHovered, this.state.scrollableOffsetLeft, this.state.scrollableOffsetTop, this.state.containerClientWidth, this.state.containerClientHeight, this.state.contentScrollWidth, this.state.contentScrollHeight, this.state.contentClientWidth, this.state.contentClientHeight, this.state.contentPaddingBottom, this.state.topPocketClientHeight, this.state.bottomPocketClientHeight, this.state.topPocketState, this.state.isLoadPanelVisible, this.state.vScrollLocation, this.state.hScrollLocation, this.state.vContentTranslateOffset, this.state.hContentTranslateOffset, this.props.inertiaEnabled, this.props.useKeyboard, this.props.onStart, this.props.onEnd, this.props.onBounce, this.props.contentTranslateOffsetChange, this.props.scrollLocationChange, this.props.pocketStateChange, this.props.children, this.props.useNative, this.props.direction, this.props.showScrollbar, this.props.bounceEnabled, this.props.scrollByContent, this.props.scrollByThumb, this.props.classes, this.props.pullDownEnabled, this.props.reachBottomEnabled, this.props.forceGeneratePockets, this.props.needScrollViewContentWrapper, this.props.needScrollViewLoadPanel, this.props.onScroll, this.props.onUpdated, this.props.onPullDown, this.props.onReachBottom, this.props.useSimulatedScrollbar, this.props.pullingDownText, this.props.pulledDownText, this.props.refreshingText, this.props.reachBottomText, this.props.aria, this.props.onVisibilityChange, this.props.disabled, this.props.height, this.props.onKeyDown, this.props.rtlEnabled, this.props.visible, this.props.width])
    }
    disposeWheelTimer() {
        return () => this.clearWheelValidationTimer()
    }
    scrollEffect() {
        return subscribeToScrollEvent(this.containerElement, () => {
            this.handleScroll()
        })
    }
    keyboardEffect() {
        keyDown.on(this.containerElement, event => {
            if (normalizeKeyName(event) === KEY_CODES.TAB) {
                this.tabWasPressed = true
            }
        });
        return () => keyDown.off(this.containerElement)
    }
    initEffect() {
        dxScrollInit.on(this.wrapperRef.current, event => {
            this.handleInit(event)
        }, this.getInitEventData(), {
            namespace: "dxScrollable"
        });
        return () => dxScrollInit.off(this.wrapperRef.current, {
            namespace: "dxScrollable"
        })
    }
    startEffect() {
        dxScrollStart.on(this.wrapperRef.current, event => {
            this.handleStart(event)
        }, {
            namespace: "dxScrollable"
        });
        return () => dxScrollStart.off(this.wrapperRef.current, {
            namespace: "dxScrollable"
        })
    }
    moveEffect() {
        dxScrollMove.on(this.wrapperRef.current, event => {
            this.handleMove(event)
        }, {
            namespace: "dxScrollable"
        });
        return () => dxScrollMove.off(this.wrapperRef.current, {
            namespace: "dxScrollable"
        })
    }
    endEffect() {
        dxScrollEnd.on(this.wrapperRef.current, event => {
            this.handleEnd(event)
        }, {
            namespace: "dxScrollable"
        });
        return () => dxScrollEnd.off(this.wrapperRef.current, {
            namespace: "dxScrollable"
        })
    }
    stopEffect() {
        dxScrollStop.on(this.wrapperRef.current, () => {
            this.handleStop()
        }, {
            namespace: "dxScrollable"
        });
        return () => dxScrollStop.off(this.wrapperRef.current, {
            namespace: "dxScrollable"
        })
    }
    cancelEffect() {
        dxScrollCancel.on(this.wrapperRef.current, event => {
            this.handleCancel(event)
        }, {
            namespace: "dxScrollable"
        });
        return () => dxScrollCancel.off(this.wrapperRef.current, {
            namespace: "dxScrollable"
        })
    }
    effectDisabledState() {
        if (this.props.disabled) {
            this.lock()
        } else {
            this.unlock()
        }
    }
    effectResetInactiveState() {
        if (this.props.direction === DIRECTION_BOTH || !isDefined(this.containerElement)) {
            return
        }
        this.containerElement[this.fullScrollInactiveProp] = 0
    }
    updateScrollbarSize() {
        this.setState(state => _extends({}, state, {
            scrollableOffsetLeft: this.scrollableOffset.left
        }));
        this.setState(state => _extends({}, state, {
            scrollableOffsetTop: this.scrollableOffset.top
        }));
        this.updateSizes()
    }
    scrollByLocation(location) {
        var {
            left: left,
            top: top
        } = location;
        if (!isDefined(top)) {
            top = 0
        }
        if (!isDefined(left)) {
            left = 0
        }
        if (0 === top && 0 === left) {
            return
        }
        this.updateHandler();
        this.prepareDirections(true);
        this.onStart();
        this.eventHandler(scrollbar => scrollbar.scrollByHandler({
            x: this.calcScrollByDeltaX(left),
            y: this.calcScrollByDeltaY(top)
        }))
    }
    calcScrollByDeltaY(top) {
        if (this.direction.isVertical) {
            var scrollbar = this.vScrollbarRef.current;
            return scrollbar.getLocationWithinRange(top + this.state.vScrollLocation) - this.state.vScrollLocation
        }
        return top
    }
    calcScrollByDeltaX(left) {
        if (this.direction.isHorizontal) {
            var scrollbar = this.hScrollbarRef.current;
            return scrollbar.getLocationWithinRange(left + this.state.hScrollLocation) - this.state.hScrollLocation
        }
        return left
    }
    updateHandler() {
        this.updateSizes();
        this.onUpdated()
    }
    handleScroll() {
        var _this$props$onScroll, _this$props;
        this.handleTabKey();
        null === (_this$props$onScroll = (_this$props = this.props).onScroll) || void 0 === _this$props$onScroll ? void 0 : _this$props$onScroll.call(_this$props, this.getEventArgs())
    }
    startLoading() {
        if (this.loadingIndicatorEnabled && isVisible(this.scrollableRef.current)) {
            this.setState(state => _extends({}, state, {
                isLoadPanelVisible: true
            }))
        }
        this.lock()
    }
    finishLoading() {
        this.setState(state => _extends({}, state, {
            isLoadPanelVisible: false
        }));
        this.unlock()
    }
    getEventArgs() {
        var scrollOffset = this.scrollOffset();
        return _extends({
            event: this.eventForUserAction,
            scrollOffset: scrollOffset
        }, getBoundaryProps(this.props.direction, scrollOffset, this.containerElement, this.state.topPocketClientHeight))
    }
    getInitEventData() {
        return {
            getDirection: this.tryGetAllowedDirection,
            validate: this.validate,
            isNative: false,
            scrollTarget: this.containerElement
        }
    }
    onStart() {
        var _this$props$onStart, _this$props2;
        null === (_this$props$onStart = (_this$props2 = this.props).onStart) || void 0 === _this$props$onStart ? void 0 : _this$props$onStart.call(_this$props2, this.getEventArgs())
    }
    onEnd(direction) {
        if (this.direction.isBoth) {
            this.endActionDirections[direction] = true;
            var {
                horizontal: horizontal,
                vertical: vertical
            } = this.endActionDirections;
            if (horizontal && vertical) {
                var _this$props$onEnd, _this$props3;
                this.endActionDirections.vertical = false;
                this.endActionDirections.horizontal = false;
                null === (_this$props$onEnd = (_this$props3 = this.props).onEnd) || void 0 === _this$props$onEnd ? void 0 : _this$props$onEnd.call(_this$props3, this.getEventArgs())
            }
        } else {
            var _this$props$onEnd2, _this$props4;
            null === (_this$props$onEnd2 = (_this$props4 = this.props).onEnd) || void 0 === _this$props$onEnd2 ? void 0 : _this$props$onEnd2.call(_this$props4, this.getEventArgs())
        }
    }
    onUpdated() {
        var _this$props$onUpdated, _this$props5;
        null === (_this$props$onUpdated = (_this$props5 = this.props).onUpdated) || void 0 === _this$props$onUpdated ? void 0 : _this$props$onUpdated.call(_this$props5, this.getEventArgs())
    }
    onBounce() {
        var _this$props$onBounce, _this$props6;
        null === (_this$props$onBounce = (_this$props6 = this.props).onBounce) || void 0 === _this$props$onBounce ? void 0 : _this$props$onBounce.call(_this$props6, this.getEventArgs())
    }
    onPullDown() {
        var _this$props$onPullDow, _this$props7;
        this.loadingIndicatorEnabled = false;
        this.startLoading();
        null === (_this$props$onPullDow = (_this$props7 = this.props).onPullDown) || void 0 === _this$props$onPullDow ? void 0 : _this$props$onPullDow.call(_this$props7, {})
    }
    onRelease() {
        this.loadingIndicatorEnabled = true;
        this.finishLoading();
        this.onUpdated()
    }
    onReachBottom() {
        var _this$props$onReachBo, _this$props8;
        this.loadingIndicatorEnabled = false;
        this.startLoading();
        null === (_this$props$onReachBo = (_this$props8 = this.props).onReachBottom) || void 0 === _this$props$onReachBo ? void 0 : _this$props$onReachBo.call(_this$props8, {})
    }
    pocketStateChange(newState) {
        this.setState(state => _extends({}, state, {
            topPocketState: newState
        }))
    }
    scrollLocationChange(scrollProp, location) {
        var containerEl = this.containerElement;
        containerEl[scrollProp] = -location;
        if ("scrollLeft" === scrollProp) {
            this.setState(state => _extends({}, state, {
                hScrollLocation: location
            }))
        } else {
            this.setState(state => _extends({}, state, {
                vScrollLocation: location
            }))
        }
    }
    onScroll() {
        eventsEngine.triggerHandler(this.containerElement, {
            type: "scroll"
        })
    }
    contentTranslateOffsetChange(prop, translateOffset) {
        if ("top" === prop) {
            this.setState(state => _extends({}, state, {
                vContentTranslateOffset: translateOffset
            }))
        } else {
            this.setState(state => _extends({}, state, {
                hContentTranslateOffset: translateOffset
            }))
        }
    }
    cursorEnterHandler() {
        if ("onHover" === this.props.showScrollbar) {
            this.setState(state => _extends({}, state, {
                isHovered: true
            }))
        }
    }
    cursorLeaveHandler() {
        if ("onHover" === this.props.showScrollbar) {
            this.setState(state => _extends({}, state, {
                isHovered: false
            }))
        }
    }
    handleInit(event) {
        this.suppressDirections(event);
        this.eventForUserAction = event;
        var crossThumbScrolling = this.isCrossThumbScrolling(event);
        this.eventHandler(scrollbar => scrollbar.initHandler(event, crossThumbScrolling))
    }
    handleStart(event) {
        this.eventForUserAction = event;
        this.eventHandler(scrollbar => scrollbar.startHandler());
        this.onStart()
    }
    handleMove(e) {
        var _e$preventDefault;
        if (this.isLocked()) {
            e.cancel = true;
            return
        }
        null === (_e$preventDefault = e.preventDefault) || void 0 === _e$preventDefault ? void 0 : _e$preventDefault.call(e);
        this.adjustDistance(e, "delta");
        this.eventForUserAction = e;
        this.eventHandler(scrollbar => scrollbar.moveHandler(e.delta))
    }
    handleEnd(event) {
        this.adjustDistance(event, "velocity");
        this.eventForUserAction = event;
        this.eventHandler(scrollbar => scrollbar.endHandler(event.velocity, true))
    }
    handleStop() {
        this.eventHandler(scrollbar => scrollbar.stopHandler())
    }
    handleCancel(event) {
        this.eventForUserAction = event;
        this.eventHandler(scrollbar => scrollbar.endHandler({
            x: 0,
            y: 0
        }, false))
    }
    isCrossThumbScrolling(event) {
        var {
            target: target
        } = event.originalEvent;
        var verticalScrolling = false;
        var horizontalScrolling = false;
        if (this.direction.isVertical) {
            verticalScrolling = this.props.scrollByThumb && this.vScrollbarRef.current.isThumb(target)
        }
        if (this.direction.isHorizontal) {
            horizontalScrolling = this.props.scrollByThumb && this.hScrollbarRef.current.isThumb(target)
        }
        return verticalScrolling || horizontalScrolling
    }
    adjustDistance(event, property) {
        var distance = event[property];
        distance.x *= this.validDirections[DIRECTION_HORIZONTAL] ? 1 : 0;
        distance.y *= this.validDirections[DIRECTION_VERTICAL] ? 1 : 0;
        var devicePixelRatio = this.tryGetDevicePixelRatio();
        if (devicePixelRatio && isDxMouseWheelEvent(event.originalEvent)) {
            distance.x = Math.round(distance.x / devicePixelRatio * 100) / 100;
            distance.y = Math.round(distance.y / devicePixelRatio * 100) / 100
        }
    }
    suppressDirections(event) {
        if (isDxMouseWheelEvent(event.originalEvent)) {
            this.prepareDirections(true);
            return
        }
        this.prepareDirections(false);
        if (this.direction.isVertical) {
            var isValid = this.validateEvent(event, this.vScrollbarRef.current);
            this.validDirections[DIRECTION_VERTICAL] = isValid
        }
        if (this.direction.isHorizontal) {
            var _isValid = this.validateEvent(event, this.hScrollbarRef.current);
            this.validDirections[DIRECTION_HORIZONTAL] = _isValid
        }
    }
    validateEvent(event, scrollbarRef) {
        var {
            scrollByContent: scrollByContent,
            scrollByThumb: scrollByThumb
        } = this.props;
        return scrollByThumb && scrollbarRef.validateEvent(event) || scrollByContent && this.isContent(event.originalEvent.target)
    }
    prepareDirections(value) {
        this.validDirections[DIRECTION_HORIZONTAL] = value;
        this.validDirections[DIRECTION_VERTICAL] = value
    }
    isContent(element) {
        var closest = element.closest(".".concat(SCROLLABLE_SIMULATED_CLASS));
        if (isDefined(closest)) {
            return closest === this.scrollableRef.current
        }
        return false
    }
    eventHandler(handler) {
        if (this.direction.isHorizontal) {
            handler(this.hScrollbarRef.current)
        }
        if (this.direction.isVertical) {
            handler(this.vScrollbarRef.current)
        }
    }
    tryGetAllowedDirection(event) {
        return isDxMouseWheelEvent(event) ? this.wheelDirection(event) : this.allowedDirection()
    }
    allowedDirection() {
        if (this.direction.isBoth && this.allowedDirections.vertical && this.allowedDirections.horizontal) {
            return DIRECTION_BOTH
        }
        if (this.direction.isHorizontal && this.allowedDirections.horizontal) {
            return DIRECTION_HORIZONTAL
        }
        if (this.direction.isVertical && this.allowedDirections.vertical) {
            return DIRECTION_VERTICAL
        }
        return
    }
    get allowedDirections() {
        return {
            vertical: this.direction.isVertical && (Math.round(-Math.max(this.contentHeight - this.state.containerClientHeight, 0)) < 0 || this.props.bounceEnabled),
            horizontal: this.direction.isHorizontal && (Math.round(-Math.max(this.contentWidth - this.state.containerClientWidth, 0)) < 0 || this.props.bounceEnabled)
        }
    }
    isLocked() {
        return this.locked
    }
    validateWheel(event) {
        var scrollbar = "horizontal" === this.wheelDirection(event) ? this.hScrollbarRef.current : this.vScrollbarRef.current;
        var reachedMin = scrollbar.reachedMin();
        var reachedMax = scrollbar.reachedMax();
        var contentGreaterThanContainer = !reachedMin || !reachedMax;
        var locatedNotAtBound = !reachedMin && !reachedMax;
        var scrollFromMin = reachedMin && event.delta > 0;
        var scrollFromMax = reachedMax && event.delta < 0;
        var validated = contentGreaterThanContainer && (locatedNotAtBound || scrollFromMin || scrollFromMax);
        validated = validated || void 0 !== this.validateWheelTimer;
        if (validated) {
            this.clearWheelValidationTimer();
            this.validateWheelTimer = setTimeout(this.clearWheelValidationTimer, VALIDATE_WHEEL_TIMEOUT)
        }
        return validated
    }
    clearWheelValidationTimer() {
        clearTimeout(this.validateWheelTimer);
        this.validateWheelTimer = void 0
    }
    validateMove(event) {
        if (!this.props.scrollByContent && !isDefined(event.target.closest(".".concat(SCROLLABLE_SCROLLBAR_CLASS)))) {
            return false
        }
        return isDefined(this.allowedDirection())
    }
    handleTabKey() {
        if (this.tabWasPressed) {
            var {
                left: left,
                top: top
            } = this.scrollOffset();
            if (inRange(this.state.hScrollLocation, -getScrollLeftMax(this.containerElement), 0) && inRange(this.state.vScrollLocation, -getScrollTopMax(this.containerElement), 0)) {
                if (this.state.hScrollLocation !== -left) {
                    this.setState(state => _extends({}, state, {
                        hScrollLocation: -left
                    }))
                }
                if (this.state.vScrollLocation !== -top) {
                    this.setState(state => _extends({}, state, {
                        vScrollLocation: -top
                    }))
                }
            }
            this.tabWasPressed = false
        }
    }
    handleKeyDown(event) {
        var handled = true;
        switch (normalizeKeyName(event)) {
            case KEY_CODES.TAB:
                this.tabWasPressed = true;
                handled = false;
                break;
            case KEY_CODES.DOWN:
                this.scrollByLine({
                    y: 1
                });
                break;
            case KEY_CODES.UP:
                this.scrollByLine({
                    y: -1
                });
                break;
            case KEY_CODES.RIGHT:
                this.scrollByLine({
                    x: 1
                });
                break;
            case KEY_CODES.LEFT:
                this.scrollByLine({
                    x: -1
                });
                break;
            case KEY_CODES.PAGE_DOWN:
                this.scrollByPage(1);
                break;
            case KEY_CODES.PAGE_UP:
                this.scrollByPage(-1);
                break;
            case KEY_CODES.HOME:
                this.scrollToHome();
                break;
            case KEY_CODES.END:
                this.scrollToEnd();
                break;
            default:
                handled = false
        }
        if (handled) {
            event.originalEvent.stopPropagation();
            event.originalEvent.preventDefault()
        }
    }
    scrollByLine(lines) {
        var _lines$y, _lines$x;
        var devicePixelRatio = this.tryGetDevicePixelRatio();
        var scrollOffset = SCROLL_LINE_HEIGHT;
        if (devicePixelRatio) {
            scrollOffset = Math.abs(scrollOffset / devicePixelRatio * 100) / 100
        }
        this.scrollBy({
            top: (null !== (_lines$y = lines.y) && void 0 !== _lines$y ? _lines$y : 0) * scrollOffset,
            left: (null !== (_lines$x = lines.x) && void 0 !== _lines$x ? _lines$x : 0) * scrollOffset
        })
    }
    tryGetDevicePixelRatio() {
        return hasWindow() ? getWindow().devicePixelRatio : void 0
    }
    scrollByPage(page) {
        var {
            isVertical: isVertical
        } = new ScrollDirection(this.wheelDirection());
        var distance = {};
        var {
            clientHeight: clientHeight,
            clientWidth: clientWidth
        } = this.containerElement;
        if (isVertical) {
            distance.top = page * clientHeight
        } else {
            distance.left = page * clientWidth
        }
        this.scrollBy(distance)
    }
    wheelDirection(event) {
        switch (this.props.direction) {
            case DIRECTION_HORIZONTAL:
                return DIRECTION_HORIZONTAL;
            case DIRECTION_VERTICAL:
                return DIRECTION_VERTICAL;
            default:
                return null !== event && void 0 !== event && event.shiftKey ? DIRECTION_HORIZONTAL : DIRECTION_VERTICAL
        }
    }
    scrollToHome() {
        var distance = {
            [this.direction.isVertical ? "top" : "left"]: 0
        };
        this.scrollTo(distance)
    }
    scrollToEnd() {
        var {
            isVertical: isVertical
        } = new ScrollDirection(this.wheelDirection());
        var distance = {};
        if (isVertical) {
            distance.top = getScrollTopMax(this.containerElement)
        } else {
            distance.left = getScrollLeftMax(this.containerElement)
        }
        this.scrollTo(distance)
    }
    lock() {
        this.locked = true
    }
    unlock() {
        if (!this.props.disabled) {
            this.locked = false
        }
    }
    get fullScrollInactiveProp() {
        return this.props.direction === DIRECTION_HORIZONTAL ? "scrollTop" : "scrollLeft"
    }
    onVisibilityChangeHandler(visible) {
        var _this$props$onVisibil, _this$props9;
        if (visible) {
            this.updateHandler();
            if (this.savedScrollOffset) {
                this.containerElement.scrollTop = this.savedScrollOffset.top;
                this.containerElement.scrollLeft = this.savedScrollOffset.left
            }
            this.savedScrollOffset = void 0
        } else {
            this.savedScrollOffset = this.scrollOffset()
        }
        null === (_this$props$onVisibil = (_this$props9 = this.props).onVisibilityChange) || void 0 === _this$props$onVisibil ? void 0 : _this$props$onVisibil.call(_this$props9, visible)
    }
    updateSizes() {
        var containerEl = this.containerElement;
        var contentEl = this.contentRef.current;
        if (isDefined(containerEl)) {
            this.setState(state => _extends({}, state, {
                containerClientWidth: containerEl.clientWidth
            }));
            this.setState(state => _extends({}, state, {
                containerClientHeight: containerEl.clientHeight
            }))
        }
        if (isDefined(contentEl)) {
            this.setState(state => _extends({}, state, {
                contentClientWidth: contentEl.clientWidth
            }));
            this.setState(state => _extends({}, state, {
                contentClientHeight: contentEl.clientHeight
            }));
            this.setState(state => _extends({}, state, {
                contentScrollWidth: contentEl.scrollWidth
            }));
            this.setState(state => _extends({}, state, {
                contentScrollHeight: contentEl.scrollHeight
            }))
        }
        var topPocketEl = this.topPocketRef.current;
        var bottomPocketEl = this.bottomPocketRef.current;
        if (isDefined(topPocketEl)) {
            this.setState(state => _extends({}, state, {
                topPocketClientHeight: topPocketEl.clientHeight
            }))
        }
        if (isDefined(bottomPocketEl)) {
            this.setState(state => _extends({}, state, {
                bottomPocketClientHeight: bottomPocketEl.clientHeight
            }))
        }
        this.setState(state => _extends({}, state, {
            contentPaddingBottom: getElementPaddingBottom(this.contentRef.current)
        }))
    }
    get containerElement() {
        return this.containerRef.current
    }
    get contentWidth() {
        var _this$contentRef;
        if (!isDefined(null === (_this$contentRef = this.contentRef) || void 0 === _this$contentRef ? void 0 : _this$contentRef.current)) {
            return 0
        }
        var isOverflowHidden = "hidden" === getElementComputedStyle(this.contentRef.current).overflowX;
        if (isOverflowHidden) {
            return this.state.contentClientWidth
        }
        var containerScrollSize = this.state.contentScrollWidth;
        return Math.max(containerScrollSize, this.state.contentClientWidth)
    }
    get contentHeight() {
        var _this$contentRef2;
        if (!isDefined(null === (_this$contentRef2 = this.contentRef) || void 0 === _this$contentRef2 ? void 0 : _this$contentRef2.current)) {
            return 0
        }
        var isOverflowHidden = "hidden" === getElementComputedStyle(this.contentRef.current).overflowY;
        if (isOverflowHidden) {
            return this.state.contentClientHeight
        }
        var containerScrollSize = this.state.contentScrollHeight;
        return Math.max(containerScrollSize, this.state.contentClientHeight)
    }
    get scrollableOffset() {
        var _getElementOffset;
        return null !== (_getElementOffset = getElementOffset(this.scrollableRef.current)) && void 0 !== _getElementOffset ? _getElementOffset : DEFAULT_OFFSET
    }
    get contentStyles() {
        return {
            transform: "translate(".concat(this.state.hContentTranslateOffset, "px, ").concat(this.state.vContentTranslateOffset, "px)")
        }
    }
    get containerStyles() {
        var touchDirection = this.allowedDirections.vertical ? "pan-x" : "";
        touchDirection = this.allowedDirections.horizontal ? "pan-y" : touchDirection;
        touchDirection = this.allowedDirections.vertical && this.allowedDirections.horizontal ? "none" : touchDirection;
        return {
            touchAction: touchDirection
        }
    }
    get cssClasses() {
        var {
            classes: classes,
            direction: direction,
            disabled: disabled,
            showScrollbar: showScrollbar
        } = this.props;
        var classesMap = {
            "dx-scrollable": true,
            [SCROLLABLE_SIMULATED_CLASS]: true,
            ["dx-scrollable-".concat(direction)]: true,
            [SCROLLABLE_DISABLED_CLASS]: !!disabled,
            [SCROLLABLE_SCROLLBARS_ALWAYSVISIBLE]: "always" === showScrollbar,
            ["".concat(classes)]: !!classes
        };
        return combineClasses(classesMap)
    }
    get direction() {
        return new ScrollDirection(this.props.direction)
    }
    get restAttributes() {
        var _this$props10 = this.props,
            restProps = _objectWithoutPropertiesLoose(_this$props10, _excluded);
        return restProps
    }
    content() {
        if (this.props.needScrollViewContentWrapper) {
            return this.scrollViewContentRef.current
        }
        return this.contentRef.current
    }
    container() {
        return this.containerRef.current
    }
    refresh() {
        var _this$props$onPullDow2, _this$props11;
        this.pocketStateChange(TopPocketState.STATE_READY);
        this.startLoading();
        null === (_this$props$onPullDow2 = (_this$props11 = this.props).onPullDown) || void 0 === _this$props$onPullDow2 ? void 0 : _this$props$onPullDow2.call(_this$props11, {})
    }
    release() {
        this.updateSizes();
        this.eventHandler(scrollbar => scrollbar.releaseHandler())
    }
    scrollBy(distance) {
        this.scrollByLocation(convertToLocation(distance, this.props.direction))
    }
    scrollTo(targetLocation) {
        var {
            direction: direction
        } = this.props;
        var distance = getOffsetDistance(targetLocation, direction, this.scrollOffset());
        this.scrollBy(distance)
    }
    scrollToElement(element, scrollToOptions) {
        if (!isDefined(element)) {
            return
        }
        var {
            left: left,
            top: top
        } = this.scrollOffset();
        element.scrollIntoView(scrollToOptions || {
            block: "nearest",
            inline: "nearest"
        });
        var containerEl = this.containerElement;
        var {
            direction: direction
        } = this.props;
        var distance = getOffsetDistance({
            top: top,
            left: left
        }, direction, this.scrollOffset());
        if (!this.direction.isHorizontal) {
            containerEl.scrollLeft += distance.left
        }
        if (!this.direction.isVertical) {
            containerEl.scrollTop += distance.top
        }
        var {
            scrollLeft: scrollLeft,
            scrollTop: scrollTop
        } = containerEl;
        this.setState(state => _extends({}, state, {
            vScrollLocation: -scrollTop
        }));
        this.setState(state => _extends({}, state, {
            hScrollLocation: -scrollLeft
        }))
    }
    getElementLocation(element, direction, offset) {
        return getElementLocationInternal(element, _extends({
            top: 0,
            left: 0,
            right: 0,
            bottom: 0
        }, offset), direction, this.containerElement)
    }
    scrollHeight() {
        return this.content().offsetHeight
    }
    scrollWidth() {
        return this.content().offsetWidth
    }
    scrollOffset() {
        var {
            scrollLeft: scrollLeft,
            scrollTop: scrollTop
        } = this.containerElement;
        return {
            top: scrollTop,
            left: scrollLeft
        }
    }
    scrollTop() {
        return this.scrollOffset().top
    }
    scrollLeft() {
        return this.scrollOffset().left
    }
    clientHeight() {
        return this.containerElement.clientHeight
    }
    clientWidth() {
        return this.containerElement.clientWidth
    }
    validate(event) {
        if (this.isLocked()) {
            return false
        }
        this.updateHandler();
        return this.moveIsAllowed(event)
    }
    moveIsAllowed(event) {
        if (this.props.disabled || isDxMouseWheelEvent(event) && isCommandKeyPressed({
                ctrlKey: event.ctrlKey,
                metaKey: event.metaKey
            })) {
            return false
        }
        if (this.props.bounceEnabled) {
            return true
        }
        return isDxMouseWheelEvent(event) ? this.validateWheel(event) : this.validateMove(event)
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props),
            isHovered: this.state.isHovered,
            scrollableOffsetLeft: this.state.scrollableOffsetLeft,
            scrollableOffsetTop: this.state.scrollableOffsetTop,
            containerClientWidth: this.state.containerClientWidth,
            containerClientHeight: this.state.containerClientHeight,
            contentScrollWidth: this.state.contentScrollWidth,
            contentScrollHeight: this.state.contentScrollHeight,
            contentClientWidth: this.state.contentClientWidth,
            contentClientHeight: this.state.contentClientHeight,
            contentPaddingBottom: this.state.contentPaddingBottom,
            topPocketClientHeight: this.state.topPocketClientHeight,
            bottomPocketClientHeight: this.state.bottomPocketClientHeight,
            topPocketState: this.state.topPocketState,
            isLoadPanelVisible: this.state.isLoadPanelVisible,
            vScrollLocation: this.state.vScrollLocation,
            hScrollLocation: this.state.hScrollLocation,
            vContentTranslateOffset: this.state.vContentTranslateOffset,
            hContentTranslateOffset: this.state.hContentTranslateOffset,
            scrollableRef: this.scrollableRef,
            wrapperRef: this.wrapperRef,
            contentRef: this.contentRef,
            scrollViewContentRef: this.scrollViewContentRef,
            containerRef: this.containerRef,
            topPocketRef: this.topPocketRef,
            bottomPocketRef: this.bottomPocketRef,
            vScrollbarRef: this.vScrollbarRef,
            hScrollbarRef: this.hScrollbarRef,
            scrollByLocation: this.scrollByLocation,
            calcScrollByDeltaY: this.calcScrollByDeltaY,
            calcScrollByDeltaX: this.calcScrollByDeltaX,
            updateHandler: this.updateHandler,
            handleScroll: this.handleScroll,
            startLoading: this.startLoading,
            finishLoading: this.finishLoading,
            getEventArgs: this.getEventArgs,
            getInitEventData: this.getInitEventData,
            onStart: this.onStart,
            onEnd: this.onEnd,
            onUpdated: this.onUpdated,
            onBounce: this.onBounce,
            onPullDown: this.onPullDown,
            onRelease: this.onRelease,
            onReachBottom: this.onReachBottom,
            pocketStateChange: this.pocketStateChange,
            scrollLocationChange: this.scrollLocationChange,
            onScroll: this.onScroll,
            contentTranslateOffsetChange: this.contentTranslateOffsetChange,
            cursorEnterHandler: this.cursorEnterHandler,
            cursorLeaveHandler: this.cursorLeaveHandler,
            handleInit: this.handleInit,
            handleStart: this.handleStart,
            handleMove: this.handleMove,
            handleEnd: this.handleEnd,
            handleStop: this.handleStop,
            handleCancel: this.handleCancel,
            isCrossThumbScrolling: this.isCrossThumbScrolling,
            adjustDistance: this.adjustDistance,
            suppressDirections: this.suppressDirections,
            validateEvent: this.validateEvent,
            prepareDirections: this.prepareDirections,
            isContent: this.isContent,
            eventHandler: this.eventHandler,
            tryGetAllowedDirection: this.tryGetAllowedDirection,
            allowedDirection: this.allowedDirection,
            allowedDirections: this.allowedDirections,
            isLocked: this.isLocked,
            validateWheel: this.validateWheel,
            clearWheelValidationTimer: this.clearWheelValidationTimer,
            validateMove: this.validateMove,
            handleTabKey: this.handleTabKey,
            handleKeyDown: this.handleKeyDown,
            scrollByLine: this.scrollByLine,
            tryGetDevicePixelRatio: this.tryGetDevicePixelRatio,
            scrollByPage: this.scrollByPage,
            wheelDirection: this.wheelDirection,
            scrollToHome: this.scrollToHome,
            scrollToEnd: this.scrollToEnd,
            lock: this.lock,
            unlock: this.unlock,
            fullScrollInactiveProp: this.fullScrollInactiveProp,
            onVisibilityChangeHandler: this.onVisibilityChangeHandler,
            updateSizes: this.updateSizes,
            containerElement: this.containerElement,
            contentWidth: this.contentWidth,
            contentHeight: this.contentHeight,
            scrollableOffset: this.scrollableOffset,
            contentStyles: this.contentStyles,
            containerStyles: this.containerStyles,
            cssClasses: this.cssClasses,
            direction: this.direction,
            restAttributes: this.restAttributes
        })
    }
}
ScrollableSimulated.defaultProps = _extends({}, ScrollableSimulatedPropsType);
