/*!
 * devextreme-angular
 * Version: 21.2.1-alpha-21212-0323
 * Build date: Sat Jul 31 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf, Output, EventEmitter, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoTabPanelOptions } from './base/tab-panel-options';
import { DxiItemComponent } from './item-dxi';
var DxoTabPanelOptionsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxoTabPanelOptionsComponent, _super);
    function DxoTabPanelOptionsComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        _this._createEventEmitters([
            { emit: 'itemsChange' },
            { emit: 'selectedIndexChange' },
            { emit: 'selectedItemChange' }
        ]);
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    Object.defineProperty(DxoTabPanelOptionsComponent.prototype, "_optionPath", {
        get: function () {
            return 'tabPanelOptions';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoTabPanelOptionsComponent.prototype, "itemsChildren", {
        get: function () {
            return this._getOption('items');
        },
        set: function (value) {
            this.setChildren('items', value);
        },
        enumerable: true,
        configurable: true
    });
    DxoTabPanelOptionsComponent.prototype.ngOnInit = function () {
        this._addRecreatedComponent();
    };
    DxoTabPanelOptionsComponent.prototype.ngOnDestroy = function () {
        this._addRemovedOption(this._getOptionPath());
    };
    DxoTabPanelOptionsComponent.ctorParameters = function () { return [
        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
        { type: NestedOptionHost, decorators: [{ type: Host }] }
    ]; };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxoTabPanelOptionsComponent.prototype, "itemsChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxoTabPanelOptionsComponent.prototype, "selectedIndexChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxoTabPanelOptionsComponent.prototype, "selectedItemChange", void 0);
    tslib_1.__decorate([
        ContentChildren(forwardRef(function () { return DxiItemComponent; })),
        tslib_1.__metadata("design:type", QueryList),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxoTabPanelOptionsComponent.prototype, "itemsChildren", null);
    DxoTabPanelOptionsComponent = tslib_1.__decorate([
        Component({
            selector: 'dxo-tab-panel-options',
            template: '',
            providers: [NestedOptionHost],
            inputs: [
                'accessKey',
                'activeStateEnabled',
                'animationEnabled',
                'dataSource',
                'deferRendering',
                'disabled',
                'elementAttr',
                'focusStateEnabled',
                'height',
                'hint',
                'hoverStateEnabled',
                'itemHoldTimeout',
                'items',
                'itemTemplate',
                'itemTitleTemplate',
                'loop',
                'noDataText',
                'onContentReady',
                'onDisposing',
                'onInitialized',
                'onItemClick',
                'onItemContextMenu',
                'onItemHold',
                'onItemRendered',
                'onOptionChanged',
                'onSelectionChanged',
                'onTitleClick',
                'onTitleHold',
                'onTitleRendered',
                'repaintChangesOnly',
                'rtlEnabled',
                'scrollByContent',
                'scrollingEnabled',
                'selectedIndex',
                'selectedItem',
                'showNavButtons',
                'swipeEnabled',
                'tabIndex',
                'visible',
                'width'
            ],
            styles: ['']
        }),
        tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
        tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
            NestedOptionHost])
    ], DxoTabPanelOptionsComponent);
    return DxoTabPanelOptionsComponent;
}(DxoTabPanelOptions));
export { DxoTabPanelOptionsComponent };
var DxoTabPanelOptionsModule = /** @class */ (function () {
    function DxoTabPanelOptionsModule() {
    }
    DxoTabPanelOptionsModule = tslib_1.__decorate([
        NgModule({
            declarations: [
                DxoTabPanelOptionsComponent
            ],
            exports: [
                DxoTabPanelOptionsComponent
            ],
        })
    ], DxoTabPanelOptionsModule);
    return DxoTabPanelOptionsModule;
}());
export { DxoTabPanelOptionsModule };
//# sourceMappingURL=data:application/json;base64,