/*!
 * devextreme-angular
 * Version: 21.2.1-alpha-21212-0323
 * Build date: Sat Jul 31 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf, Output, EventEmitter, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoTextBoxOptions } from './base/text-box-options';
import { DxiButtonComponent } from './button-dxi';
var DxoSearchEditorOptionsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxoSearchEditorOptionsComponent, _super);
    function DxoSearchEditorOptionsComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        _this._createEventEmitters([
            { emit: 'textChange' },
            { emit: 'valueChange' }
        ]);
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    Object.defineProperty(DxoSearchEditorOptionsComponent.prototype, "_optionPath", {
        get: function () {
            return 'searchEditorOptions';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoSearchEditorOptionsComponent.prototype, "buttonsChildren", {
        get: function () {
            return this._getOption('buttons');
        },
        set: function (value) {
            this.setChildren('buttons', value);
        },
        enumerable: true,
        configurable: true
    });
    DxoSearchEditorOptionsComponent.prototype.ngOnInit = function () {
        this._addRecreatedComponent();
    };
    DxoSearchEditorOptionsComponent.prototype.ngOnDestroy = function () {
        this._addRemovedOption(this._getOptionPath());
    };
    DxoSearchEditorOptionsComponent.ctorParameters = function () { return [
        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
        { type: NestedOptionHost, decorators: [{ type: Host }] }
    ]; };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxoSearchEditorOptionsComponent.prototype, "textChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxoSearchEditorOptionsComponent.prototype, "valueChange", void 0);
    tslib_1.__decorate([
        ContentChildren(forwardRef(function () { return DxiButtonComponent; })),
        tslib_1.__metadata("design:type", QueryList),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxoSearchEditorOptionsComponent.prototype, "buttonsChildren", null);
    DxoSearchEditorOptionsComponent = tslib_1.__decorate([
        Component({
            selector: 'dxo-search-editor-options',
            template: '',
            providers: [NestedOptionHost],
            inputs: [
                'accessKey',
                'activeStateEnabled',
                'buttons',
                'disabled',
                'elementAttr',
                'focusStateEnabled',
                'height',
                'hint',
                'hoverStateEnabled',
                'inputAttr',
                'isValid',
                'mask',
                'maskChar',
                'maskInvalidMessage',
                'maskRules',
                'maxLength',
                'mode',
                'name',
                'onChange',
                'onContentReady',
                'onCopy',
                'onCut',
                'onDisposing',
                'onEnterKey',
                'onFocusIn',
                'onFocusOut',
                'onInitialized',
                'onInput',
                'onKeyDown',
                'onKeyPress',
                'onKeyUp',
                'onOptionChanged',
                'onPaste',
                'onValueChanged',
                'placeholder',
                'readOnly',
                'rtlEnabled',
                'showClearButton',
                'showMaskMode',
                'spellcheck',
                'stylingMode',
                'tabIndex',
                'text',
                'useMaskedValue',
                'validationError',
                'validationErrors',
                'validationMessageMode',
                'validationStatus',
                'value',
                'valueChangeEvent',
                'visible',
                'width'
            ],
            styles: ['']
        }),
        tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
        tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
            NestedOptionHost])
    ], DxoSearchEditorOptionsComponent);
    return DxoSearchEditorOptionsComponent;
}(DxoTextBoxOptions));
export { DxoSearchEditorOptionsComponent };
var DxoSearchEditorOptionsModule = /** @class */ (function () {
    function DxoSearchEditorOptionsModule() {
    }
    DxoSearchEditorOptionsModule = tslib_1.__decorate([
        NgModule({
            declarations: [
                DxoSearchEditorOptionsComponent
            ],
            exports: [
                DxoSearchEditorOptionsComponent
            ],
        })
    ], DxoSearchEditorOptionsModule);
    return DxoSearchEditorOptionsModule;
}());
export { DxoSearchEditorOptionsModule };
//# sourceMappingURL=data:application/json;base64,