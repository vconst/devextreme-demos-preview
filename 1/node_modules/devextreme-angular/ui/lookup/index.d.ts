/*!
 * devextreme-angular
 * Version: 21.2.1-alpha-21212-0323
 * Build date: Sat Jul 31 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import { AnimationConfig } from 'devextreme/animation/fx';
import { PositionConfig } from 'devextreme/animation/position';
import DevExpress from 'devextreme/bundles/dx.all';
import { Properties as dxPopoverOptions } from 'devextreme/ui/popover';
import DxLookup from 'devextreme/ui/lookup';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
/**
 * The Lookup is a UI component that allows an end user to search for an item in a collection shown in a drop-down menu.

 */
export declare class DxLookupComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxLookup;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    accessKey: string;
    /**
     * Specifies whether or not the UI component changes its state when interacting with a user.
    
     */
    activeStateEnabled: boolean;
    /**
     * Configures UI component visibility animations. This object contains two fields: show and hide.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    animation: {
        hide?: AnimationConfig;
        show?: AnimationConfig;
    };
    /**
     * The text displayed on the Apply button.
    
     */
    applyButtonText: string;
    /**
     * Specifies the way an end-user applies the selected value.
    
     */
    applyValueMode: string;
    /**
     * The text displayed on the Cancel button.
    
     */
    cancelButtonText: string;
    /**
     * Specifies whether or not the UI component cleans the search box when the popup window is displayed.
    
     */
    cleanSearchOnOpening: boolean;
    /**
     * The text displayed on the Clear button.
    
     */
    clearButtonText: string;
    /**
     * Specifies whether to close the drop-down menu if a user clicks outside it.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    closeOnOutsideClick: boolean | Function;
    /**
     * Binds the UI component to data.
    
     */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | DevExpress.data.Store | string | Array<DevExpress.ui.CollectionWidgetItem | any>;
    /**
     * Specifies whether to render the drop-down field&apos;s content when it is displayed. If false, the content is rendered immediately.
    
     */
    deferRendering: boolean;
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    disabled: boolean;
    /**
     * Specifies the data field whose values should be displayed.
    
     */
    displayExpr: Function | string;
    /**
     * Returns the value currently displayed by the UI component.
    
     */
    displayValue: string;
    /**
     * Specifies whether to vertically align the drop-down menu so that the selected item is in its center. Applies only in Material Design themes.
    
     */
    dropDownCentered: boolean;
    /**
     * Configures the drop-down field.
    
     */
    dropDownOptions: dxPopoverOptions;
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    elementAttr: any;
    /**
     * Specifies a custom template for the input field.
    
     */
    fieldTemplate: any;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
    
     */
    focusStateEnabled: boolean;
    /**
     * A Boolean value specifying whether or not to display the lookup in full-screen mode.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    fullScreen: boolean;
    /**
     * A Boolean value specifying whether or not to group UI component items.
    
     */
    grouped: boolean;
    /**
     * Specifies a custom template for group captions.
    
     */
    groupTemplate: any;
    /**
     * Specifies the UI component&apos;s height.
    
     */
    height: number | Function | string;
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    hint: string;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    hoverStateEnabled: boolean;
    /**
     * Specifies the attributes to be passed on to the underlying HTML element.
    
     */
    inputAttr: any;
    /**
     * Specifies or indicates whether the editor&apos;s value is valid.
    
     */
    isValid: boolean;
    /**
     * An array of items displayed by the UI component.
    
     */
    items: Array<any | {
        disabled?: boolean;
        html?: string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>;
    /**
     * Specifies a custom template for items.
    
     */
    itemTemplate: any;
    /**
     * The minimum number of characters that must be entered into the text box to begin a search. Applies only if searchEnabled is true.
    
     */
    minSearchLength: number;
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
    
     */
    name: string;
    /**
     * The text displayed on the button used to load the next page from the data source.
    
     */
    nextButtonText: string;
    /**
     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.
    
     */
    noDataText: string;
    /**
     * Specifies whether or not the drop-down editor is displayed.
    
     */
    opened: boolean;
    /**
     * Specifies the text shown in the pullDown panel, which is displayed when the UI component is scrolled to the bottom.
    
     */
    pageLoadingText: string;
    /**
     * Specifies whether the next page is loaded when a user scrolls the UI component to the bottom or when the &apos;next&apos; button is clicked.
    
     */
    pageLoadMode: string;
    /**
     * The text displayed by the UI component when nothing is selected.
    
     */
    placeholder: string;
    /**
     * Specifies the popup element&apos;s height. Applies only if fullScreen is false.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    popupHeight: number | Function | string;
    /**
     * Specifies the popup element&apos;s width. Applies only if fullScreen is false.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    popupWidth: number | Function | string;
    /**
     * An object defining UI component positioning properties.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    position: PositionConfig;
    /**
     * Specifies the text displayed in the pullDown panel when the UI component is pulled below the refresh threshold.
    
     */
    pulledDownText: string;
    /**
     * Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold.
    
     */
    pullingDownText: string;
    /**
     * A Boolean value specifying whether or not the UI component supports the &apos;pull down to refresh&apos; gesture.
    
     */
    pullRefreshEnabled: boolean;
    /**
     * Specifies the text displayed in the pullDown panel while the UI component is being refreshed.
    
     */
    refreshingText: string;
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    rtlEnabled: boolean;
    /**
     * Specifies whether the search box is visible.
    
     */
    searchEnabled: boolean;
    /**
     * Specifies the name of a data source item field or an expression whose value is compared to the search criterion.
    
     */
    searchExpr: Function | string | Array<Function | string>;
    /**
     * Specifies a comparison operation used to search UI component items.
    
     */
    searchMode: string;
    /**
     * The text that is provided as a hint in the lookup&apos;s search bar.
    
     */
    searchPlaceholder: string;
    /**
     * Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed.
    
     */
    searchTimeout: number;
    /**
     * Gets the currently selected item.
    
     */
    selectedItem: any;
    /**
     * Specifies whether to shade the container when the lookup is active. Applies only if usePopover is false.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    shading: boolean;
    /**
     * Specifies whether to display the Cancel button in the lookup window.
    
     */
    showCancelButton: boolean;
    /**
     * Specifies whether to display the Clear button in the lookup window.
    
     */
    showClearButton: boolean;
    /**
     * Specifies whether or not the UI component displays unfiltered values until a user types a number of characters exceeding the minSearchLength property value.
    
     */
    showDataBeforeSearch: boolean;
    /**
     * A Boolean value specifying whether or not to display the title in the popup window.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    showPopupTitle: boolean;
    /**
     * Specifies how the UI component&apos;s text field is styled.
    
     */
    stylingMode: string;
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    tabIndex: number;
    /**
     * The read-only property that holds the text displayed by the UI component input element.
    
     */
    text: string;
    /**
     * The title of the lookup window.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    title: string;
    /**
     * Specifies a custom template for the title.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    titleTemplate: any;
    /**
     * Specifies whether the widget uses item&apos;s text a title attribute.
    
     */
    useItemTextAsTitle: boolean;
    /**
     * Specifies whether or not the UI component uses native scrolling.
    
     */
    useNativeScrolling: boolean;
    /**
     * Specifies whether to show lookup contents in the Popover UI component.
    
     */
    usePopover: boolean;
    /**
     * Information on the broken validation rule. Contains the first item from the validationErrors array.
    
     */
    validationError: any;
    /**
     * An array of the validation rules that failed.
    
     */
    validationErrors: Array<any>;
    /**
     * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.
    
     */
    validationMessageMode: string;
    /**
     * Indicates or specifies the current validation status.
    
     */
    validationStatus: string;
    /**
     * Specifies the currently selected value. May be an object if dataSource contains objects and valueExpr is not set.
    
     */
    value: any;
    /**
     * Specifies the DOM events after which the UI component&apos;s value should be updated.
    
     */
    valueChangeEvent: string;
    /**
     * Specifies which data field provides unique values to the UI component&apos;s value.
    
     */
    valueExpr: Function | string;
    /**
     * Specifies whether the UI component is visible.
    
     */
    visible: boolean;
    /**
     * Specifies the UI component&apos;s width.
    
     */
    width: number | Function | string;
    /**
     * Specifies whether text that exceeds the drop-down list width should be wrapped.
    
     */
    wrapItemText: boolean;
    /**
    
     * A function that is executed once the drop-down editor is closed.
    
    
     */
    onClosed: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component&apos;s content is ready and each time the content is changed.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed when a list item is clicked or tapped.
    
    
     */
    onItemClick: EventEmitter<any>;
    /**
    
     * A function that is executed once the drop-down editor is opened.
    
    
     */
    onOpened: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed before the next page is loaded.
    
    
     */
    onPageLoading: EventEmitter<any>;
    /**
    
     * A function that is executed when the &apos;pull to refresh&apos; gesture is performed on the drop-down item list. Supported on mobile devices only.
    
    
     */
    onPullRefresh: EventEmitter<any>;
    /**
    
     * A function that is executed on each scroll gesture performed on the drop-down item list.
    
    
     */
    onScroll: EventEmitter<any>;
    /**
    
     * A function that is executed when a list item is selected or selection is canceled.
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when the drop-down list&apos;s title is rendered.
    
     * @deprecated Use the dropDownOptions option instead.
    
    
     */
    onTitleRendered: EventEmitter<any>;
    /**
    
     * A function that is executed after the UI component&apos;s value is changed.
    
    
     */
    onValueChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationChange: EventEmitter<{
        hide?: AnimationConfig;
        show?: AnimationConfig;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    applyButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    applyValueModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cancelButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cleanSearchOnOpeningChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    clearButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    closeOnOutsideClickChange: EventEmitter<boolean | Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | DevExpress.data.Store | string | Array<DevExpress.ui.CollectionWidgetItem | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    deferRenderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayValueChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownCenteredChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownOptionsChange: EventEmitter<dxPopoverOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    fieldTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    fullScreenChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    inputAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isValidChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<any | {
        disabled?: boolean;
        html?: string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minSearchLengthChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nextButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    openedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageLoadingTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageLoadModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    placeholderChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    popupHeightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    popupWidthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    positionChange: EventEmitter<PositionConfig>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pulledDownTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pullingDownTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pullRefreshEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    refreshingTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchExprChange: EventEmitter<Function | string | Array<Function | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchPlaceholderChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchTimeoutChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showCancelButtonChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showClearButtonChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showDataBeforeSearchChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showPopupTitleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stylingModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    textChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useItemTextAsTitleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useNativeScrollingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    usePopoverChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessageModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationStatusChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChangeEventChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    wrapItemTextChange: EventEmitter<boolean>;
    /**
    
     * 
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    itemsChildren: QueryList<DxiItemComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxLookup;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
}
export declare class DxLookupModule {
}
