/*!
 * devextreme-angular
 * Version: 21.2.1-alpha-21212-0323
 * Build date: Sat Jul 31 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { Properties as dxPopupOptions } from 'devextreme/ui/popup';
import DxDropDownButton from 'devextreme/ui/drop_down_button';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
/**
 * The DropDownButton is a button that opens a drop-down menu.

 */
export declare class DxDropDownButtonComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxDropDownButton;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    accessKey: string;
    /**
     * Specifies whether or not the UI component changes its state when interacting with a user.
    
     */
    activeStateEnabled: boolean;
    /**
     * Provides data for the drop-down menu.
    
     */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | DevExpress.data.Store | string | Array<DevExpress.ui.dxDropDownButtonItem | any>;
    /**
     * Specifies whether to wait until the drop-down menu is opened the first time to render its content.
    
     */
    deferRendering: boolean;
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    disabled: boolean;
    /**
     * Specifies the data field whose values should be displayed in the drop-down menu.
    
     */
    displayExpr: Function | string;
    /**
     * Specifies custom content for the drop-down field.
    
     */
    dropDownContentTemplate: any;
    /**
     * Configures the drop-down field.
    
     */
    dropDownOptions: dxPopupOptions;
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    elementAttr: any;
    /**
     * Specifies whether users can use keyboard to focus the UI component.
    
     */
    focusStateEnabled: boolean;
    /**
     * Specifies the UI component&apos;s height.
    
     */
    height: number | Function | string;
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    hint: string;
    /**
     * Specifies whether the UI component changes its state when a user hovers the mouse pointer over it.
    
     */
    hoverStateEnabled: boolean;
    /**
     * Specifies the button&apos;s icon.
    
     */
    icon: string;
    /**
     * Provides drop-down menu items.
    
     */
    items: Array<any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        icon?: string;
        onClick?: Function | string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>;
    /**
     * Specifies a custom template for drop-down menu items.
    
     */
    itemTemplate: any;
    /**
     * Specifies which data field provides keys used to distinguish between the selected drop-down menu items.
    
     */
    keyExpr: string;
    /**
     * Specifies the text or HTML markup displayed in the drop-down menu when it does not contain any items.
    
     */
    noDataText: string;
    /**
     * Specifies whether the drop-down menu is opened.
    
     */
    opened: boolean;
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    rtlEnabled: boolean;
    /**
     * Contains the selected item&apos;s data. Available when useSelectMode is true.
    
     */
    selectedItem: any | number | string;
    /**
     * Contains the selected item&apos;s key and allows you to specify the initially selected item. Applies when useSelectMode is true.
    
     */
    selectedItemKey: number | string;
    /**
     * Specifies whether the arrow icon should be displayed.
    
     */
    showArrowIcon: boolean;
    /**
     * Specifies whether to split the button in two: one executes an action, the other opens and closes the drop-down menu.
    
     */
    splitButton: boolean;
    /**
     * Specifies how the button is styled.
    
     */
    stylingMode: string;
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    tabIndex: number;
    /**
     * Specifies the button&apos;s text. Applies only if useSelectMode is false.
    
     */
    text: string;
    /**
     * Specifies whether the widget uses item&apos;s text a title attribute.
    
     */
    useItemTextAsTitle: boolean;
    /**
     * Specifies whether the UI component stores the selected drop-down menu item.
    
     */
    useSelectMode: boolean;
    /**
     * Specifies whether the UI component is visible.
    
     */
    visible: boolean;
    /**
     * Specifies the UI component&apos;s width.
    
     */
    width: number | Function | string;
    /**
     * Specifies whether text that exceeds the drop-down list width should be wrapped.
    
     */
    wrapItemText: boolean;
    /**
    
     * A function that is executed when the button is clicked or tapped. If splitButton is true, this function is executed for the action button only.
    
    
     */
    onButtonClick: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component&apos;s content is ready and each time the content is changed.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed when a drop-down menu item is clicked.
    
    
     */
    onItemClick: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when an item is selected or selection is canceled. In effect when useSelectMode is true.
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | DevExpress.data.Store | string | Array<DevExpress.ui.dxDropDownButtonItem | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    deferRenderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownContentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownOptionsChange: EventEmitter<dxPopupOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    iconChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        icon?: string;
        onClick?: Function | string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    openedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemChange: EventEmitter<any | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemKeyChange: EventEmitter<number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showArrowIconChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    splitButtonChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stylingModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    textChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useItemTextAsTitleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useSelectModeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    wrapItemTextChange: EventEmitter<boolean>;
    itemsChildren: QueryList<DxiItemComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxDropDownButton;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
}
export declare class DxDropDownButtonModule {
}
