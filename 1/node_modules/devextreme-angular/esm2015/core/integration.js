/*!
 * devextreme-angular
 * Version: 21.2.1-alpha-21212-0323
 * Build date: Sat Jul 31 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
import { NgModule, Inject, NgZone, Optional, VERSION } from '@angular/core';
import { XhrFactory } from '@angular/common/http';
import httpRequest from 'devextreme/core/http_request';
import { DOCUMENT } from '@angular/common';
import domAdapter from 'devextreme/core/dom_adapter';
import readyCallbacks from 'devextreme/core/utils/ready_callbacks';
import eventsEngine from 'devextreme/events/core/events_engine';
const outsideZoneEvents = ['mousemove', 'mouseover', 'mouseout'];
const insideZoneEvents = ['mouseup', 'click', 'mousedown', 'transitionend', 'wheel'];
let originalAdd;
let callbacks = [];
let readyCallbackAdd = function (callback) {
    if (!originalAdd) {
        originalAdd = this.callBase.bind(this);
    }
    callbacks.push(callback);
};
const ɵ0 = readyCallbackAdd;
readyCallbacks.inject({
    add: function (callback) {
        return readyCallbackAdd.call(this, callback);
    }
});
let doInjections = (document, ngZone, xhrFactory) => {
    if (Number(VERSION.major) < 7) {
        console.warn(`Your version of Angular is not supported (https://supportcenter.devexpress.com/ticket/details/t879496). Please update your project to version 7 or later. Please refer to the Angular Update Guide for more information: https://update.angular.io`);
    }
    domAdapter.inject({
        _document: document,
        listen: function (...args) {
            const eventName = args[1];
            if (outsideZoneEvents.indexOf(eventName) !== -1) {
                return ngZone.runOutsideAngular(() => {
                    return this.callBase.apply(this, args);
                });
            }
            if (ngZone.isStable && insideZoneEvents.indexOf(eventName) !== -1) {
                return ngZone.run(() => {
                    return this.callBase.apply(this, args);
                });
            }
            return this.callBase.apply(this, args);
        },
        isElementNode: function (element) {
            return element && element.nodeType === 1;
        },
        isTextNode: function (element) {
            return element && element.nodeType === 3;
        },
        isDocument: function (element) {
            return element && element.nodeType === 9;
        }
    });
    httpRequest.inject({
        getXhr: function () {
            if (!xhrFactory) {
                return this.callBase.apply(this);
            }
            let _xhr = xhrFactory.build();
            if (!('withCredentials' in _xhr)) {
                _xhr['withCredentials'] = false;
            }
            return _xhr;
        }
    });
    const runReadyCallbacksInZone = () => {
        ngZone.run(() => {
            eventsEngine.set({});
            callbacks.forEach(callback => originalAdd.call(null, callback));
            callbacks = [];
            readyCallbacks.fire();
        });
    };
    runReadyCallbacksInZone();
    readyCallbackAdd = (callback) => ngZone.run(() => callback());
    doInjections = runReadyCallbacksInZone;
};
const ɵ1 = doInjections;
let DxIntegrationModule = class DxIntegrationModule {
    constructor(document, ngZone, xhrFactory) {
        doInjections(document, ngZone, xhrFactory);
    }
};
DxIntegrationModule.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: NgZone },
    { type: XhrFactory, decorators: [{ type: Optional }] }
];
DxIntegrationModule = tslib_1.__decorate([
    NgModule({}),
    tslib_1.__param(0, Inject(DOCUMENT)), tslib_1.__param(2, Optional()),
    tslib_1.__metadata("design:paramtypes", [Object, NgZone, XhrFactory])
], DxIntegrationModule);
export { DxIntegrationModule };
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWdyYXRpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kZXZleHRyZW1lLWFuZ3VsYXIvY29yZS8iLCJzb3VyY2VzIjpbImludGVncmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztHQVdHOztBQUVILG9DQUFvQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxXQUFXLE1BQU0sOEJBQThCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sVUFBVSxNQUFNLDZCQUE2QixDQUFDO0FBQ3JELE9BQU8sY0FBYyxNQUFNLHVDQUF1QyxDQUFDO0FBQ25FLE9BQU8sWUFBWSxNQUFNLHNDQUFzQyxDQUFDO0FBRWhFLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ2pFLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFckYsSUFBSSxXQUFXLENBQUM7QUFDaEIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ25CLElBQUksZ0JBQWdCLEdBQUcsVUFBUyxRQUFRO0lBQ3BDLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDZCxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDMUM7SUFDRCxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdCLENBQUMsQ0FBQzs7QUFFRixjQUFjLENBQUMsTUFBTSxDQUFDO0lBQ2xCLEdBQUcsRUFBRSxVQUFTLFFBQVE7UUFD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USxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDOUQsWUFBWSxHQUFHLHVCQUF1QixDQUFDO0FBQzNDLENBQUMsQ0FBQzs7QUFHRixJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtJQUM1QixZQUE4QixRQUFhLEVBQUUsTUFBYyxFQUFjLFVBQXNCO1FBQzNGLFlBQVksQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Q0FDSixDQUFBOzs0Q0FIZ0IsTUFBTSxTQUFDLFFBQVE7WUFBeUIsTUFBTTtZQUEwQixVQUFVLHVCQUFqQyxRQUFROztBQUQ3RCxtQkFBbUI7SUFEL0IsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQUVJLG1CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQSxFQUFpQyxtQkFBQSxRQUFRLEVBQUUsQ0FBQTtxREFBbkIsTUFBTSxFQUEwQixVQUFVO0dBRHRGLG1CQUFtQixDQUkvQjtTQUpZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKiBWZXJzaW9uOiAyMS4yLjEtYWxwaGEtMjEyMTItMDMyM1xuICogQnVpbGQgZGF0ZTogU2F0IEp1bCAzMSAyMDIxXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMSBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcbiAqXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuaW1wb3J0IHsgTmdNb2R1bGUsIEluamVjdCwgTmdab25lLCBPcHRpb25hbCwgVkVSU0lPTiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgWGhyRmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCBodHRwUmVxdWVzdCBmcm9tICdkZXZleHRyZW1lL2NvcmUvaHR0cF9yZXF1ZXN0JztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IGRvbUFkYXB0ZXIgZnJvbSAnZGV2ZXh0cmVtZS9jb3JlL2RvbV9hZGFwdGVyJztcbmltcG9ydCByZWFkeUNhbGxiYWNrcyBmcm9tICdkZXZleHRyZW1lL2NvcmUvdXRpbHMvcmVhZHlfY2FsbGJhY2tzJztcbmltcG9ydCBldmVudHNFbmdpbmUgZnJvbSAnZGV2ZXh0cmVtZS9ldmVudHMvY29yZS9ldmVudHNfZW5naW5lJztcblxuY29uc3Qgb3V0c2lkZVpvbmVFdmVudHMgPSBbJ21vdXNlbW92ZScsICdtb3VzZW92ZXInLCAnbW91c2VvdXQnXTtcbmNvbnN0IGluc2lkZVpvbmVFdmVudHMgPSBbJ21vdXNldXAnLCAnY2xpY2snLCAnbW91c2Vkb3duJywgJ3RyYW5zaXRpb25lbmQnLCAnd2hlZWwnXTtcblxubGV0IG9yaWdpbmFsQWRkO1xubGV0IGNhbGxiYWNrcyA9IFtdO1xubGV0IHJlYWR5Q2FsbGJhY2tBZGQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmICghb3JpZ2luYWxBZGQpIHtcbiAgICAgICAgb3JpZ2luYWxBZGQgPSB0aGlzLmNhbGxCYXNlLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbn07XG5cbnJlYWR5Q2FsbGJhY2tzLmluamVjdCh7XG4gICAgYWRkOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gcmVhZHlDYWxsYmFja0FkZC5jYWxsKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9XG59KTtcblxubGV0IGRvSW5qZWN0aW9ucyA9IChkb2N1bWVudDogYW55LCBuZ1pvbmU6IE5nWm9uZSwgeGhyRmFjdG9yeTogWGhyRmFjdG9yeSkgPT4ge1xuICAgIGlmIChOdW1iZXIoVkVSU0lPTi5tYWpvcikgPCA3KSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgWW91ciB2ZXJzaW9uIG9mIEFuZ3VsYXIgaXMgbm90IHN1cHBvcnRlZCAoaHR0cHM6Ly9zdXBwb3J0Y2VudGVyLmRldmV4cHJlc3MuY29tL3RpY2tldC9kZXRhaWxzL3Q4Nzk0OTYpLiBQbGVhc2UgdXBkYXRlIHlvdXIgcHJvamVjdCB0byB2ZXJzaW9uIDcgb3IgbGF0ZXIuIFBsZWFzZSByZWZlciB0byB0aGUgQW5ndWxhciBVcGRhdGUgR3VpZGUgZm9yIG1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vdXBkYXRlLmFuZ3VsYXIuaW9gKTtcbiAgICB9XG5cbiAgICBkb21BZGFwdGVyLmluamVjdCh7XG4gICAgICAgIF9kb2N1bWVudDogZG9jdW1lbnQsXG5cbiAgICAgICAgbGlzdGVuOiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBldmVudE5hbWUgPSBhcmdzWzFdO1xuICAgICAgICAgICAgaWYgKG91dHNpZGVab25lRXZlbnRzLmluZGV4T2YoZXZlbnROYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsbEJhc2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChuZ1pvbmUuaXNTdGFibGUgJiYgaW5zaWRlWm9uZUV2ZW50cy5pbmRleE9mKGV2ZW50TmFtZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxsQmFzZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsbEJhc2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNFbGVtZW50Tm9kZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc1RleHROb2RlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAzO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzRG9jdW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGh0dHBSZXF1ZXN0LmluamVjdCh7XG4gICAgICAgIGdldFhocjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIXhockZhY3RvcnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxsQmFzZS5hcHBseSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBfeGhyID0geGhyRmFjdG9yeS5idWlsZCgpO1xuICAgICAgICAgICAgaWYgKCEoJ3dpdGhDcmVkZW50aWFscycgaW4gX3hocikpIHtcbiAgICAgICAgICAgICAgICAoX3hociBhcyBhbnkpWyd3aXRoQ3JlZGVudGlhbHMnXSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gX3hocjtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgcnVuUmVhZHlDYWxsYmFja3NJblpvbmUgPSAoKSA9PiB7XG4gICAgICAgIG5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgZXZlbnRzRW5naW5lLnNldCh7fSk7XG4gICAgICAgICAgICBjYWxsYmFja3MuZm9yRWFjaChjYWxsYmFjayA9PiBvcmlnaW5hbEFkZC5jYWxsKG51bGwsIGNhbGxiYWNrKSk7XG4gICAgICAgICAgICBjYWxsYmFja3MgPSBbXTtcbiAgICAgICAgICAgIHJlYWR5Q2FsbGJhY2tzLmZpcmUoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJ1blJlYWR5Q2FsbGJhY2tzSW5ab25lKCk7XG5cbiAgICByZWFkeUNhbGxiYWNrQWRkID0gKGNhbGxiYWNrKSA9PiBuZ1pvbmUucnVuKCgpID0+IGNhbGxiYWNrKCkpO1xuICAgIGRvSW5qZWN0aW9ucyA9IHJ1blJlYWR5Q2FsbGJhY2tzSW5ab25lO1xufTtcblxuQE5nTW9kdWxlKHt9KVxuZXhwb3J0IGNsYXNzIER4SW50ZWdyYXRpb25Nb2R1bGUge1xuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIGRvY3VtZW50OiBhbnksIG5nWm9uZTogTmdab25lLCBAT3B0aW9uYWwoKSB4aHJGYWN0b3J5OiBYaHJGYWN0b3J5KSB7XG4gICAgICAgIGRvSW5qZWN0aW9ucyhkb2N1bWVudCwgbmdab25lLCB4aHJGYWN0b3J5KTtcbiAgICB9XG59XG4iXX0=